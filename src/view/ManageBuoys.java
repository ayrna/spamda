/*
SPAMDA: Software for Pre-processing and Analysis of Meteorological DAta to build datasets

Copyright (c) 2017-2021 by AYRNA Research Group. https://www.uco.es/ayrna/
    Authors: 
      Gómez-Orellana, A.M.; Fernández, J.C.; Dorado-Moreno, M.; Gutiérrez, P.A.; Hervás-Martínez, C.
      Building Suitable Datasets for Soft Computing and Machine Learning Techniques from Meteorological
       Data Integration: A Case Study for Predicting Significant Wave Height and Energy Flux.
      Energies 2021, 14, 468. https://doi.org/10.3390/en14020468                                                                       

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program,
in the file COPYING. If not, see <http://www.gnu.org/licenses/>.

Additional permissions under GNU GPL version 3 section 7:
1. Redistributions of source code, with or without modification, must retain
the above full copyright notice as author attributions.

2. Redistributions in binary form and/or the use of the documentation,
with or without modification, must reproduce the above full copyright notice
as author attributions in the documentation and/or materials provided with
the distribution.

3. Modified versions of source code and/or documentation, as well as binary
distributions, must be marked in reasonable ways as different from the original version.

4. Neither name of copyright holders nor the names of its contributors may be used
to endorse or promote products derived from this software for publicity purposes
without specific prior written permission.

5. Redistribution and/or use of source code, binary format and documentation,
with or without modification, could require indemnification of licensors
and authors by anyone who conveys the material (or modified versions of it)
with contractual assumptions of liability to the recipient, for any liability
that these contractual assumptions directly impose on those licensors and authors.

SPAMDA uses some external libraries. You can see their respective notices about license,
copyright and disclaimer in the following files. For a more complete information about
such licenses, see the distributions provided by their authors:
-Library NetCDF Java, version 4.6.10
	Notice of license in the file NetCDF-LICENSE
-Library SLF4J, version 1.7.25
	Notice of license in the file SLF4J-LICENSE
-Library WEKA, version 3.8.1
	Notice of license in the file WEKA-LICENSE

Contact information:
Antonio Manuel Gomez Orellana, Mr.
email: am[dot]gomez[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).

Juan Carlos Fernandez Caballero, PhD.
email: jfcaballero[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).
 */

package view;

import controller.ControllerViewManageBuoys;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import view.interfaces.InterfaceViewManageBuoys;
import javax.swing.DefaultListModel;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;


/**
 * This class defines the view to manage the information of the buoys entered in the application.
 * 
 */
public class ManageBuoys extends javax.swing.JDialog implements InterfaceViewManageBuoys {

    /* Generated by NetBeans. */
    private static final long serialVersionUID = -7662837839451347466L;
    
    
    /* Frame that created this view. */
    private Frame parent;

    
    /**
     * Creates new dialog ManageBuoys
     * 
     * @param parent Jframe that creates this dialog.
     * @param modal Indicates if the dialog is modal or not.
     */
    public ManageBuoys(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    
        /* Sets the parent. */
        this.parent=parent;
        
        /* Tab: Buoys */
        
        /* Sets columns size (grid with information about buoys) . */
        tblBuoys.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblBuoys.getColumnModel().getColumn(1).setPreferredWidth(192);
        tblBuoys.getColumnModel().getColumn(2).setPreferredWidth(381);
        tblBuoys.getColumnModel().getColumn(3).setPreferredWidth(93);
        tblBuoys.getColumnModel().getColumn(4).setPreferredWidth(16);
        tblBuoys.getColumnModel().getColumn(5).setPreferredWidth(93);
        tblBuoys.getColumnModel().getColumn(6).setPreferredWidth(16);
        tblBuoys.getColumnModel().getColumn(7).setPreferredWidth(64);
        
        

        /* Tab: Datasets */
        
        /* Sets columns size (grid with information about buoys.). */
        tblBuoysDatasets.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblBuoysDatasets.getColumnModel().getColumn(1).setPreferredWidth(192);

        /* When sets the datamodel will only show the columns created in the view. */
        tblBuoysDatasets.setAutoCreateColumnsFromModel(false);
        
        
        
        /* Tab: Matching */
        
        /* When sets the datamodel will only show the columns created in the view. */
        tblBuoysMatching.setAutoCreateColumnsFromModel(false);
        
        /* Sets columns size (grid with information about buoys.). */
        tblBuoysMatching.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblBuoysMatching.getColumnModel().getColumn(1).setPreferredWidth(192);
        
        
        /* Tab: Final datasets */
        
        /* Sets columns size (grid with information about thresholds). */
        tblThresholds.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblThresholds.getColumnModel().getColumn(0).setPreferredWidth(68);
        tblThresholds.getColumnModel().getColumn(1).setPreferredWidth(170);
        tblThresholds.getColumnModel().getColumn(2).setPreferredWidth(83);
        
        /* Sets auto resize off --> horizontal scroll will be available. */
        tblFinalDataset.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

    }
    
    
    /* Methods of InterfaceViewManageBuoys */

    
    @Override
    public void setController(ControllerViewManageBuoys controller){
                
        /* Main tab of view. */
        jTabbedMain.addChangeListener(controller);

        /* Menu items. */
        itemBuoys.addActionListener(controller);
        itemDatasets.addActionListener(controller);
        itemPreprocess.addActionListener(controller);
        itemMatching.addActionListener(controller);
        itemMainMenu.addActionListener(controller);
        itemHelpManual.addActionListener(controller);
        
        
        /* Buttons. (Tab: Buoys) */
        btnDeleteBuoy.addActionListener(controller);
        btnModifyBuoy.addActionListener(controller);
        btnNewBuoy.addActionListener(controller);
        btnMainMenuBuoys.addActionListener(controller);

        /* Tables.  (Tab: Buoys) */        
        tblBuoys.addMouseListener(controller);
        

        
        /* Buttons. (Tab: Datasets) */        
        btnBackDatasets.addActionListener(controller);       
        btnMainMenuDatasets.addActionListener(controller);        
        btnOpenDataset.addActionListener(controller);
        btnNewDataset.addActionListener(controller);
        btnDeleteDataset.addActionListener(controller);
        btnOpenPreprocessedDataset.addActionListener(controller);
        btnDeletePreprocessedDataset.addActionListener(controller);

        /* Tables.  (Tab: Datasets) */        
        tblBuoysDatasets.addMouseListener(controller);        
        tblBuoysDatasets.getSelectionModel().addListSelectionListener(controller);
        
        /* List.    (Tab: Datasets) */                
        jlstOriginalDatasets.addMouseListener(controller);
        jlstOriginalDatasets.addListSelectionListener(controller);
        jlstPreprocessedDatasets.addMouseListener(controller);
        jlstPreprocessedDatasets.addListSelectionListener(controller);
                
        

        /* Buttons. (Tab: Preprocess) */
        btnBrowse.addActionListener(controller);
        btnSave.addActionListener(controller);
        btnBackPreprocess.addActionListener(controller);
        btnMainMenuPreprocess.addActionListener(controller);
        btnApplyFilter.addActionListener(controller);
        btnUndo.addActionListener(controller);
        btnRestoreData.addActionListener(controller);
        btnConfigureFilter.addActionListener(controller);
        btnPreviousDatePreprocess.addActionListener(controller);
        btnNextDatePreprocess.addActionListener(controller);
        
        /* JTree. (Tab: Preprocess) */
        jTFilters.addTreeSelectionListener(controller);        
        
        /* Tables. (Tab: File information (Preprocess) ) */
        tblAttributes.getSelectionModel().addListSelectionListener(controller);
        
        /* Tables. (Tab: View Data (Preprocess) ) */
        jTabbedPreprocess.addMouseListener(controller);

        
        
        /* Buttons. (Tab: Matching configuration) */
        btnBackMatching.addActionListener(controller);
        btnMainMenuMatching.addActionListener(controller);
        btnSelectDataset.addActionListener(controller);
        btnSelectPreprocessedDataset.addActionListener(controller);
        btnLoadMatching.addActionListener(controller);
        btnSaveMatching.addActionListener(controller);
        btnRunMatching.addActionListener(controller);
        btnSelectReanalysisFiles.addActionListener(controller);
        btnSelectBuoyVariables.addActionListener(controller);
        btnOutputFile.addActionListener(controller);
        
        /* ComboBox. (Tab: Matching configuration) */
        jcmbOutputFileFormat.addActionListener(controller);
        jcmbAttributeToPredict.addActionListener(controller);
        
        /* Tables.  (Tab: Matching configuration) */        
        tblBuoysMatching.getSelectionModel().addListSelectionListener(controller);

        /* List.    (Tab: Matching configuration) */
        jlstMatchingDatasets.addListSelectionListener(controller);
        jlstMatchingDatasets.addMouseListener(controller);
        jlstMatchingPreprocessedDatasets.addMouseListener(controller);
        
        /* Check Box: (Tab: Matching configuration) */
        jcbFluxOfEnergy.addActionListener(controller);
        
        /* JTextField: (Tab: Matching configuration) */
        jtfNumberOfNearestGeopoints.addFocusListener(controller);
        
        /* Buttons. (Tab: Final datasets) */
        btnMainMenuFinalDatasets.addActionListener(controller);
        btnBackFinalDatasets.addActionListener(controller);
        btnCreateFinalDatasets.addActionListener(controller);
        
        btnModifyThreshold.addActionListener(controller);
        btnDeleteThreshold.addActionListener(controller);
        btnAddThreshold.addActionListener(controller);
        
        btnIncreaseHorizon.addActionListener(controller);
        btnDecreaseHorizon.addActionListener(controller);
        
        btnUpdateHorizon.addActionListener(controller);
        
        btnPreviousDateFinalDataset.addActionListener(controller);
        btnNextDateFinalDataset.addActionListener(controller);
        
        
        /* ComboBox. (Tab: Final datasets) */
        jcmbFinalDatasetToVisualise.addActionListener(controller);
        
        /* Check Box: (Tab: Final datasets) */
        jcbSynchroniseRData.addActionListener(controller);        
        jcbTimeAttribute.addActionListener(controller);
        
    }

    
    @Override
    public void showView(){
        
        /* Shows the view. */    
        
        this.setVisible(true);
    
    }

    
    @Override
    public void closeView(){
    
        /* Closes the view. */
        this.dispose();
        
    }

    
    @Override
    public Frame getParent(){
    
        /* Gets the parent that created the view. */
        return this.parent;
        
    }
    
    
    @Override
    public void setSelectedTab(int index){
        
        /* Sets the selected tab. */
        
        jTabbedMain.setSelectedIndex(index);
    
    }

    
    @Override
    public int getSelectedTab(){
        
        /* Gets the selected tab. */
        
        return jTabbedMain.getSelectedIndex();
    
    }
    
    
    @Override
    public void setEnabledTab(int index, boolean enabledDisabled){
        
        /* Sets enabled/disabled the received tab number. */
        
        jTabbedMain.setEnabledAt(index, enabledDisabled);
    
    }       
    
    
    /* Methods of Tab: Buoys */
    
    @Override
    public DefaultTableModel getModelBuoys(){
    
        /* Returns Model of the table that will show the information about buoys. */
        return (DefaultTableModel) tblBuoys.getModel();
        
    }
    
    
    @Override
    public void setModelBuoys(DefaultTableModel datamodel){
        
        /* Show the information received about each buoy. */
        
        tblBuoys.setModel(datamodel);
        
    }

    
    @Override
    public int getSelectedRowBuoys(){
        
        /* Gets the selected row to modify / delete. */
        
        return tblBuoys.getSelectedRow();
    
    }

    
    
    /* Methods of Tab: Datasets */
    
        
    @Override
    public DefaultTableModel getModelBuoysDatasets(){
    
        /* Returns Model of the table that will show the stationID of each buoy. */
        return (DefaultTableModel) tblBuoysDatasets.getModel();
        
    }
    
    
    @Override
    public void setModelBuoysDatasets(DefaultTableModel datamodel){
        
        /* Show the stationID of each buoy. */
        
        tblBuoysDatasets.setModel(datamodel);
        
    }

    
    @Override
    public int getSelectedRowBuoysDatasets(){
        
        /* Gets the selected row. */
        
        return tblBuoysDatasets.getSelectedRow();
    
    }

    
    @Override
    public void setSelectedRowBuoysDatasets(int row){
        
        /* Sets the selected row. */

        tblBuoysDatasets.changeSelection(row, 1, false, false);    
    
    }
        
       
    @Override
    public void setModelDataset(DefaultListModel<String> listmodel){
        
        /* Shows the dataset files that belong to the buoy. */
        
        jlstOriginalDatasets.setModel(listmodel);      

        
    }

    
    @Override
    public int getSelectedIndexDataset(){
        
        /* Gets the selected dataset file. */
        
        return jlstOriginalDatasets.getSelectedIndex();
        
    }

    
    @Override
    public void setSelectedIndexDataset(int index){
    
        /* Sets the selected index dataset file. */
        
        jlstOriginalDatasets.setSelectedIndex(index);
    
    }
    
    
    @Override
    public void setModelPreprocessedDataset(DefaultListModel<String> listmodel){
        
        /* Shows the preprocess files that belong to the dataset file. */
        
        jlstPreprocessedDatasets.setModel(listmodel);      

        
    }

    
    @Override
    public int getSelectedIndexPreprocessedDataset(){
        
        /* Gets the selected preprocessed dataset. */
        
        return jlstPreprocessedDatasets.getSelectedIndex();
        
    }
    
    
    @Override
    public void setSelectedPreprocessedDataset(String preprocessedDataset){
        
        /* Sets the selected preprocessed dataset. */
        
        jlstPreprocessedDatasets.setSelectedValue(preprocessedDataset,true);
        
    }            
    
    
    @Override
    public void clearSummaryDatasets(){
        
        /* Clears the description about the dataset file. */
                
        jtaSummaryDataset.setText(null);
    
    }
    
    
    @Override
    public void addLineSummaryDataset(String information){
        
        /* Adds a line with information about the dataset file. */
        
        jtaSummaryDataset.append(information);
            
    }
    
    
    
    /* Methods of Tab: Preprocess */

        
    
    @Override
    public DefaultTableModel getModelAttributes(){
    
        /* Returns Model of the table that will show the name of the attributes in
           dataset file selected by user. */
        return (DefaultTableModel) tblAttributes.getModel();
        
    }
    
    
    @Override
    public void setModelAttributes(DefaultTableModel datamodel){
        
        /* Show the name of each attribute. */
        
        tblAttributes.setModel(datamodel);
        
    }

    
    @Override
    public int getSelectedRowAttributes(){
        
        /* Gets the selected row. */
        
        return tblAttributes.getSelectedRow();
    
    }

    
    @Override
    public void setSelectedRowAttributes(int row){
        
        /* Sets the selected row. */

        tblAttributes.changeSelection(row, 1, false, false);
    
    }
    
    
    @Override
    public DefaultTableModel getModelStatistics(){
    
        /* Returns Model of the table that will show the statistics of each attribute */
          
        return (DefaultTableModel) tblStatistics.getModel();
        
    }
    
    
    @Override
    public void setModelStatistics(DefaultTableModel datamodel){
        
        /* Show the statistics of each attribute. */
        
        tblStatistics.setModel(datamodel);
                
    }
    

    @Override
    public int getSelectedRowStatisticalValues(){
        
        /* Gets the selected row of the statistical values. */
        
        return tblStatistics.getSelectedRow();
        
    }   
    
    
    @Override
    public void setStatisticsFilterByAttribute(String attribute){
        
        /* Filters statistics by attribute's name. */
        
        /* Creates the filter. 
           0 -> Column to filter. */
        RowFilter<TableModel, Integer> rowFilter = RowFilter.regexFilter(attribute, 0);
        
        /* Creates the sorter. */
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblStatistics.getModel());
        
        /* Does the filtering. */
        tblStatistics.setRowSorter( sorter );
        sorter.setRowFilter( rowFilter );
        sorter.sort();
        
    }
    
    
    @Override
    public void setTblStatisticsCellRenderer(DefaultTableCellRenderer tableCellRenderer){
        
        /* Sets tableCellRenderer for tblStatistics. */
        
        tblStatistics.setDefaultRenderer(Object.class, tableCellRenderer);
        
    }        
    
            
    @Override
    public void addLineSummaryPreprocessed(String information){
        
        /* Adds a line with information about the dataset file selected. */
        
        jtaSummaryPreprocessed.append(information);
    
    }

    
    @Override
    public void clearSummaryPreprocessed(){
        
        /* Clears the description about the preprocessed dataset file. */
                
        jtaSummaryPreprocessed.setText(null);
    
    }
    
    
    @Override
    public void setEnableUndo(boolean state){

        /* Sets Undo button enabled true/false. */
        
        btnUndo.setEnabled(state);

    }

    
    @Override
    public void setEnableRestoreData(boolean state){

        /* Sets Restore data button enabled true/false. */
        
        btnRestoreData.setEnabled(state);

    }
    
    
    @Override
    public void setEnablePreviousDatePreprocess(boolean state){

        /* Sets PreviousDate button of tab 'Preprocess' enabled true/false. */
        
        btnPreviousDatePreprocess.setEnabled(state);

    }
    
    
    @Override
    public void setEnableNextDatePreprocess(boolean state){

        /* Sets PreviousDate button of tab 'Preprocess' enabled true/false. */
        
        btnNextDatePreprocess.setEnabled(state);

    }
    
    
    @Override
    public void setEnableSave(boolean state){

        /* Sets Save button enabled true/false. */
        
        btnSave.setEnabled(state);

    }
    
    
    @Override
    public void setSelectedStationIDPreprocess(String selectedStationID){

        /* Sets selected Station ID by user to create preprocessed dataset files. */
        
        jtfSelectedStationIDPreprocess.setText(selectedStationID);

    }

    
    @Override
    public void setSelectedOriginalDataset(String selectedOriginalDataset){

        /* Sets selected original dataset by user to create preprocessed dataset files. */
        
        jtfSelectedOriginalDataset.setText(selectedOriginalDataset);

    }
    
    
    @Override
    public String getSelectedOriginalDataset(){

        /* Gets selected original dataset by user to create preprocessed dataset files. */
        
        return jtfSelectedOriginalDataset.getText();

    }
  
    
    @Override
    public void setOpenedDataset(String openedDataset){

        /* Sets opened dataset by user to preprocess. */
        
        jtfOpenedDataset.setText(openedDataset);

    }
    
    
    @Override
    public String getOpenedDataset(){

        /* Gets opened dataset by user to preprocess. */
        
        return jtfOpenedDataset.getText();

    }
    
      
    @Override
    public int getSelectedRowFilter(){
        
        /* Gets selected row filter by user. */
        
        return jTFilters.getLeadSelectionRow();
        
    }
    

    @Override
    public String getSelectedFilterName(){
        
        /* Gets selected filter by user. */
        
        /* Gets selected node by user. */
        
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTFilters.getLastSelectedPathComponent();
        
        /* Gets name of the filter. */
        return node.getUserObject().toString();
        
    }
    
    
    @Override
    public int getTabbedPreprocessSelectedIndex(){
        
        /* Gets the selected index in jTabbedPreprocess */
        
        return jTabbedPreprocess.getSelectedIndex();
        
    }   
       
    
    @Override
    public void setModelPreprocessedData(DefaultTableModel datamodel){
        
        /* Shows the information of the preprocessed dataset. */
        
        tblPreprocessedData.setModel(datamodel);
        
    }
    
    
    @Override
    public DefaultTableModel getModelPreprocessedData(){
    
        /* Returns the model of the table that shows the information of the pre-processed dataset. */
        return (DefaultTableModel) tblPreprocessedData.getModel();
        
    }
    
        
    @Override
    public void hideColumnOfPreprocessedData(int numColumn){

        /* Hides the received column in the table that shows the content of the preprocessed dataset. */
        
        tblPreprocessedData.getColumnModel().getColumn(numColumn).setMaxWidth(0);
        tblPreprocessedData.getColumnModel().getColumn(numColumn).setMinWidth(0);
        tblPreprocessedData.getColumnModel().getColumn(numColumn).setWidth(0);
        tblPreprocessedData.getColumnModel().getColumn(numColumn).setPreferredWidth(0);
        tblPreprocessedData.getColumnModel().getColumn(numColumn).setResizable(false);
        
    }    
                    
    
    @Override
    public void setTblPreprocessedDataCellRenderer(DefaultTableCellRenderer tableCellRenderer){
        
        /* Sets tableCellRenderer for PreprocessedData. */
        
        tblPreprocessedData.setDefaultRenderer(Object.class, tableCellRenderer);
        
    }    
    
    
    @Override
    public int getSelectedRowPreprocessedData(){
        
        /* Gets the selected row. */
        
        return tblPreprocessedData.getSelectedRow();
        
    }

    
    @Override
    public void setSelectedRowPreprocessedData(int row){
        
        /* Sets the received row as selected in the preprocessed dataset. */
        tblPreprocessedData.setRowSelectionInterval(row, row);
        
        /* Shows the new selected row. */
        tblPreprocessedData.scrollRectToVisible(new Rectangle(tblPreprocessedData.getCellRect(row, 0, true)));
    
    }
    
     
    
    /* Methods of Tab: Matching */

    @Override
    public DefaultTableModel getModelBuoysMatching(){
    
        /* Returns Model of the table that will show the stationID of each buoy. */
        return (DefaultTableModel) tblBuoysMatching.getModel();
        
    }
    
    
    @Override
    public void setModelBuoysMatching(DefaultTableModel datamodel){
        
        /* Show the stationID of each buoy. */
        
        tblBuoysMatching.setModel(datamodel);
        
    }

    
    @Override
    public int getSelectedRowBuoysMatching(){
        
        /* Gets the selected row. */
        
        return tblBuoysMatching.getSelectedRow();
    
    }
    

    @Override
    public void setSelectedRowBuoysMatching(int row){
        
        /* Sets the selected row. */

        tblBuoysMatching.changeSelection(row, 1, false, false);    
            
    }
    
    
    @Override
    public void setModelMatchingDataset(DefaultListModel<String> listmodel){
        
        /* Shows the dataset files that belong to the buoy. */
        
        jlstMatchingDatasets.setModel(listmodel);      

        
    }
    
    
    @Override
    public void setModelMatchingPreprocessedDataset(DefaultListModel<String> listmodel){
        
        /* Shows the preprocess files that belong to the dataset file. */
        
        jlstMatchingPreprocessedDatasets.setModel(listmodel);      

        
    }

    
    @Override
    public int getSelectedIndexMatchingDataset(){
        
        /* Gets the selected dataset file. */
        
        return jlstMatchingDatasets.getSelectedIndex();
        
    }

    
    @Override
    public void setSelectedIndexMatchingDataset(int index){
    
        /* Sets the selected index dataset file. */
        
        jlstMatchingDatasets.setSelectedIndex(index);
    
    }    


    @Override
    public int getSelectedIndexMatchingPreprocessedDataset(){
        
        /* Gets the selected preprocessed dataset file. */
        
        return jlstMatchingPreprocessedDatasets.getSelectedIndex();
        
    }
    
    
    @Override
    public void setSelectedIndexMatchingPreprocessedDataset(int index){
    
        /* Sets the selected preprocessed dataset file. */
        
        jlstMatchingPreprocessedDatasets.setSelectedIndex(index);
    
    }
        

    @Override
    public void setSelectedMatchingDataset(String selectedMatchingDataset){

        /* Sets selected matching dataset by user. */
        
        jtfSelectedMatchingDataset.setText(selectedMatchingDataset);

    }
    
    
    @Override
    public String getSelectedMatchingDataset(){

        /* Gets selected matching dataset by user. */
        
        return jtfSelectedMatchingDataset.getText();

    }
    
    
    @Override
    public void setSelectedStationIDMatching(String selectedStationID){

        /* Sets selected Station ID by user to run Matching. */
        
        jtfSelectedStationIDMatching.setText(selectedStationID);

    }
    
    
    @Override
    public String getSelectedStationIDMatching(){

        /* Gets selected Station ID by user to run Matching. */
        
        return jtfSelectedStationIDMatching.getText();

    }
        
           
    @Override
    public void addAttributeNameToPredict(String attribute){
        
        /* Adds one attribute of the selected dataset/preprocessed dataset file. */
                        
        jcmbAttributeToPredict.addItem(attribute);
        
    }
    
    
    @Override
    public void deleteAllAttributeNameToPredict(){
        
        /* Deletes all items from comboBox. */
                        
        jcmbAttributeToPredict.removeAllItems();
        
    }    

    
    @Override
    public String getSelectedAttributeToPredict(){

        /* Gets the selected attribute to predict. */
        
        String attribute="";
        
        if(jcmbAttributeToPredict.getSelectedIndex()!=-1){
                            
            /* There is a selected attribute. */
            attribute = jcmbAttributeToPredict.getSelectedItem().toString();
        
        }                        
                
        return attribute;
        
    }
    
    
    @Override
    public void setSelectedAttributeToPredict(String attribute){

        /* Sets the selected attribute to predict. */
                
        jcmbAttributeToPredict.setSelectedItem(attribute);
        
    }
    
    

    @Override
    public void setEnabledAttributeToPredict(boolean enabledDisabled){
    
        /* Sets Enabled/Disabled selection: Attribute to predict. */
        
        jcmbAttributeToPredict.setEnabled(enabledDisabled);
        
    }
    
    
    @Override
    public void setModelReanalysisFiles(DefaultListModel<String> listmodel){               
        
        /* Sets the selected reanalysis data files to be used in matching. */
                
        jlstReanalysisFiles.setModel(listmodel);
                
    }
    
    
    @Override
    public void setModelBuoyVariables(DefaultListModel<String> listmodel){               
        
        /* Sets the selected variables of the buoy to be used in matching. */
                
        jlstBuoyVariables.setModel(listmodel);
                
    }
    
        
    @Override
    public void setBtnModifyReanalysisFiles(String text){
        
        /* Sets the text of the button btnSelectReanalysisFiles. */
        
        btnSelectReanalysisFiles.setText(text);

    }
    
    
    @Override
    public void setBtnModifyBuoyVariables(String text){
        
        /* Sets the text of the button btnSelectBuoyVariables. */
        
        btnSelectBuoyVariables.setText(text);

    }
                    

    @Override
    public boolean getIncludeMissingDates(){
    
        /* Gets include missing dates. */
        
        return jcbIncludeMissingDates.isSelected();

    }

    
    @Override
    public void setIncludeMissingDates(boolean includeMissingDates){
    
        /* Sets include missing dates. */
        
        jcbIncludeMissingDates.setSelected(includeMissingDates);

    }
    
    
    @Override
    public String getNumberNearestGeopointsToConsider(){
    
        /* Gets number of nearest geopoints to consider. */
        
        return jtfNumberOfNearestGeopoints.getText();

    }
    
    
    @Override
    public void setNumberNearestGeopointsToConsider(String numberNearestGeopointsToConsider){
    
        /* Sets number of nearest geopoints to consider. */
        
        jtfNumberOfNearestGeopoints.setText(numberNearestGeopointsToConsider);

    }               
    
    
    @Override
    public void setTextOfNumberNearestGeopointsToConsider(int maxOfNumberNearestGeopointsToConsider){
    
        /* Sets text of nearest geopoints to consider. */
        
        lblNumberOfNearestGeopoints.setText("Nearest reanalysis nodes to consider (max "+maxOfNumberNearestGeopointsToConsider+"):");
         
    }           
            
    
    @Override
    public int getOutputFilesToCreate(){
    
        /* Gets output files to create. */
        
        return jcmbNumberOutputFiles.getSelectedIndex();     

    }
    
    
    @Override
    public void setOutputFilesToCreate(int outputFilesToCreate){
    
        /* Sets output files to create. */
        
        jcmbNumberOutputFiles.setSelectedIndex(outputFilesToCreate);

    }
    
    
    @Override
    public void setEnabledOutputFilesToCreate(boolean enabledDisabled){
    
        /* Sets Enabled/Disabled selection: Number of final datasets */
        
        jcmbNumberOutputFiles.setEnabled(enabledDisabled);
        
    }
                
    
    @Override
    public boolean getDirectMatching(){
        
        /* Gets Direct matching. */
        
        return jrbDirectMatching.isSelected();
        
    }   

    
    @Override
    public void setDirectMatching(){
        
        /* Sets Direct matching. */
        
        jrbDirectMatching.setSelected(true);
        
    }   
    
    
    @Override
    public boolean getClassification(){
        
        /* Gets Prediction. */
        
        return jrbClassification.isSelected();
        
    }   

    
    @Override
    public void setClassification(){
        
        /* Sets Prediction. */
        
        jrbClassification.setSelected(true);
        
    }   


    @Override
    public boolean getRegression(){
        
        /* Gets Forecasting. */
        
        return jrbRegression.isSelected();
        
    }   

    
    @Override
    public void setRegression(){
        
        /* Sets Forecasting. */
        
        jrbRegression.setSelected(true);
        
    }
        
    
    @Override
    public boolean getCalculateFluxOfEnergy(){
    
        /* Gets calculate Flux of energy as output. */
        
        return jcbFluxOfEnergy.isSelected();

    }        


    @Override
    public void setCalculateFluxOfEnergy(boolean calculateFluxOfEnergy){
    
        /* Sets Enabled/Disabled selection: calculate Flux of energy as output. */
        
        jcbFluxOfEnergy.setSelected(calculateFluxOfEnergy);

    }    
    

        
    
    /* Methods of Tab: Final datasets */
    
    
    @Override
    public DefaultTableModel getModelThresholds(){
    
        /* Returns Model of the table that will show the information about thresholds. */
        return (DefaultTableModel) tblThresholds.getModel();
                       
    }
    
    @Override
    public int getSelectedRowThresholds(){
        
        /* Gets the selected threshold. */
        
        return tblThresholds.getSelectedRow();
        
    }
    
    
    @Override
    public void setOrderThresholds(int index){
        
        /* Orders thresholds by a specific column. */
        
        /* Creates and sets the sorter. */
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblThresholds.getModel());
        
        /* The user can not change the order of any column. */
        sorter.setSortable(0, false);
        sorter.setSortable(1, false);
        sorter.setSortable(2, false);
        sorter.setSortable(3, false);
        sorter.setSortable(4, false);
        
        
        tblThresholds.setRowSorter(sorter);

        /* Creates the key. */
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(index, SortOrder.ASCENDING));
        
        /* Does the sorting. */
        sorter.setSortKeys(sortKeys);

    }
    
    
    @Override
    public int getRowIndexOfSortedModelofThresholds(int row){
        
        /* Gets index of the received row in the sorted model of the thresholds. */
        
        return tblThresholds.convertRowIndexToModel(row);
    
    }
    
       
    @Override
    public String getThresholdClass(){
        
        /* Gets the class of the threshold. */
        return jtfClassThreshold.getText();
        
    }

    
    @Override
    public void setThresholdClass(String className){
        
        /* Sets the class of the threshold. */
        jtfClassThreshold.setText(className);

    }

    
    @Override
    public String getThresholdDescription(){
        
        /* Gets the description of the threshold. */
        return jtfDescriptionThreshold.getText();
        
    }

    
    @Override
    public void setThresholdDescription(String description){
        
        /* Sets the description of the threshold. */
        jtfDescriptionThreshold.setText(description);
        
    }
    

    @Override
    public String getThresholdValue(){
        
        /* Gets the value of the threshold. */
        return jtfValueThreshold.getText();
        
    }

    
    @Override
    public void setThresholdValue(String value){
        
        /* Sets the value of the threshold. */
        jtfValueThreshold.setText(value);

    }
    
    
    @Override
    public void setBtnAddThresholdToolTipText(String tiptext){
        
        /* Sets the tool tip text of the button btnAddThreshold. */
        btnAddThreshold.setToolTipText(tiptext);

    }
    
    
    @Override
    public void setBtnAddThresholdActionCommand(String actionCommand){
        
        /* Sets the action command of the button btnAddThreshold. */
        btnAddThreshold.setActionCommand(actionCommand);

    }


    @Override
    public void setBtnAddThresholdText(String text){
        
        /* Sets the text of the button btnAddThreshold. */
        btnAddThreshold.setText(text);

    }

    
    @Override
    public void setBtnModifyThresholdEnabled(boolean enabledDisabled){
        
        /* Sets the button 'Modify threshold' enabled or disabled. */
        btnModifyThreshold.setEnabled(enabledDisabled);

    }


    @Override
    public void setBtnDeleteThresholdEnabled(boolean enabledDisabled){
        
        /* Sets the btnDeleteThreshold enabled or disabled. */
        btnDeleteThreshold.setEnabled(enabledDisabled);

    }
    
    
    @Override
    public void setJtfValueThreshold(boolean enabledDisabled){
        
        /* Sets the jtfValueThreshold enabled or disabled. */
        jtfValueThreshold.setEnabled(enabledDisabled);

    }


    @Override
    public void setTblThresholdsCellRenderer(DefaultTableCellRenderer tableCellRenderer){
        
        /* Sets tableCellRenderer for tblThresholds. */
        
        tblThresholds.setDefaultRenderer(Object.class, tableCellRenderer);
        
    }
    
            
    @Override
    public void setEnabledPanelClassificationThresholds(boolean enabledDisabled){
        
        /* Sets enabled/disabled all elements in panel. */
        
        /* Disabled color. */
        Color disabledColor = new Color(245,245,245);

        tblThresholds.setEnabled(enabledDisabled);
        btnAddThreshold.setEnabled(enabledDisabled);
        btnModifyThreshold.setEnabled(enabledDisabled);
        btnDeleteThreshold.setEnabled(enabledDisabled);
                                
        jtfClassThreshold.setEnabled(enabledDisabled);
        jtfDescriptionThreshold.setEnabled(enabledDisabled);
        jtfValueThreshold.setEnabled(enabledDisabled);
                                
        /* Changes background color depending on enabled/disabled. */
        if(enabledDisabled){
            
            /* Enabled. */
            
            /* Enables these controls. */
            
            jtfClassThreshold.setBackground(Color.white);
            jtfDescriptionThreshold.setBackground(Color.white);
            jtfValueThreshold.setBackground(Color.white);
                    
        }else{
                    
            /* Disabled. */
            
            /* Disables these controls. */
            
            jtfClassThreshold.setBackground(disabledColor);
            jtfDescriptionThreshold.setBackground(disabledColor);
            jtfValueThreshold.setBackground(disabledColor);
            
        }        
        
    }
    

    @Override
    public void setEnabledPanelPredictionHorizon(boolean enabledDisabled){
        
        /* Sets enabled/disabled all elements in panel. */
        
        btnIncreaseHorizon.setEnabled(enabledDisabled);
        btnDecreaseHorizon.setEnabled(enabledDisabled);
        btnUpdateHorizon.setEnabled(enabledDisabled);
        jcbSynchroniseRData.setSelected(false);
        jcbSynchroniseRData.setEnabled(enabledDisabled);

    }

    
    @Override
    public void setTitlePanelThresholds(String title){
        
        /* Sets the title of the panel of thresholds. */
        
        /* Creates the border with the title. */
        TitledBorder border = new TitledBorder(title);
        border.setTitlePosition(TitledBorder.TOP);
        
        /* Sets the border with the title. */
        jpnClassificationThresholds.setBorder(border);
        
    }
    
    
    @Override
    public void setTextOfPredictionHorizon(String text){
        
        /* Sets the text with the current prediction. */
    
        lblPredictionHorizon.setText(text);
    }
    
    
    @Override
    public String getTextOfPredictionHorizon(){
        
        /* Gets the text with the current prediction. */
    
        return lblPredictionHorizon.getText();
    }
        
    
    @Override
    public boolean getSynchroniseReanalysisData(){
        
        /* Gets True if user selected 'Synchronise the reanalysis data' or False if not. */
    
        return jcbSynchroniseRData.isSelected();

    }
    
    
    @Override
    public void setSynchroniseReanalysisData(boolean synchroniseReanalysisData){
    
        /* Sets 'Synchronise the reanalysis data' option. */
        
        jcbSynchroniseRData.setSelected(synchroniseReanalysisData);

    }
    
    
    @Override
    public void setEnablebtnCreateFinalDatasets(boolean enabledDisabled){

        /* Sets CreateFinalDatasets button enabled or disabled. */
        
        btnCreateFinalDatasets.setEnabled(enabledDisabled);

    }
    
    
    @Override
    public void addFinalDatasetToVisualise(String finalDataset){
        
        /* Adds one final dataset to visualise. */
                        
        jcmbFinalDatasetToVisualise.addItem(finalDataset);
        
    }
    
    
    @Override
    public void deleteAllFinalDatasetToVisualise(){
        
        /* Deletes all items from comboBox. */
                        
        jcmbFinalDatasetToVisualise.removeAllItems();
        
    }    

    
    @Override
    public int getSelectedIndexFinalDatasetToVisualise(){

        /* Gets the selected final dataset to visualise. */
        
        return jcmbFinalDatasetToVisualise.getSelectedIndex();
        
    }
    
    @Override
    public void setSelectedIndexFinalDatasetToVisualise(int index){

        /* Sets the selected final dataset to visualise. */
        
        jcmbFinalDatasetToVisualise.setSelectedIndex(index);
        
    }
        
        
    @Override
    public void setModelFinalDataset(DefaultTableModel datamodel){
        
        /* Shows the final dataset selected to visualise. */
        
        tblFinalDataset.setModel(datamodel);  
        
    }
    
    
    @Override
    public DefaultTableModel getModelFinalDataset(){
        
        /* Returns Model of the table that will show the data
           of the final dataset to visualise. */
        
        return (DefaultTableModel) tblFinalDataset.getModel();

    }

    
    @Override
    public int getSelectedRowFinalDataset(){
        
        /* Gets the selected row. */
        
        return tblFinalDataset.getSelectedRow();
        
    }
    
    
    @Override
    public void setSelectedRowFinalDataset(int row){
        
        /* Sets the received row as selected in the final dataset. */
        tblFinalDataset.setRowSelectionInterval(row, row);
        
        /* Shows the new selected row. */
        tblFinalDataset.scrollRectToVisible(new Rectangle(tblFinalDataset.getCellRect(row, 0, true)));
    
    }
    
    
    @Override
    public void setTblFinalDatasetCellRenderer(DefaultTableCellRenderer tableCellRenderer){
        
        /* Sets tableCellRenderer for tblFinalDataset. */
        
        tblFinalDataset.setDefaultRenderer(Object.class, tableCellRenderer);
        
    }
    
    
    @Override
    public void hideColumnOfFinalDataset(int numColumn){

        /* Hides the received column in the table of final datasets to visualise. */
        
        tblFinalDataset.getColumnModel().getColumn(numColumn).setMaxWidth(0);
        tblFinalDataset.getColumnModel().getColumn(numColumn).setMinWidth(0);
        tblFinalDataset.getColumnModel().getColumn(numColumn).setWidth(0);
        tblFinalDataset.getColumnModel().getColumn(numColumn).setPreferredWidth(0);
        tblFinalDataset.getColumnModel().getColumn(numColumn).setResizable(false);
        
    }

    
    @Override
    public void showColumnOfFinalDatasetToVisualise(int numColumn){

        /* Shows the received column in the table of final datasets to visualise. */

        tblFinalDataset.getColumnModel().getColumn(numColumn).setMaxWidth(160);
        tblFinalDataset.getColumnModel().getColumn(numColumn).setMinWidth(70);
        tblFinalDataset.getColumnModel().getColumn(numColumn).setResizable(true);
        
    }    
    
    
    @Override
    public boolean getVisualiseDateAttribute(){
    
        /* Gets visualise time attribute. */
        
        return jcbTimeAttribute.isSelected();

    }        
    
    
    @Override
    public void setEnablePreviousDateFinalDataset(boolean state){

        /* Sets PreviousDate button of tab 'Final dataset' enabled true/false. */
        
        btnPreviousDateFinalDataset.setEnabled(state);

    }
    
    
    @Override
    public void setEnableNextDateFinalDataset(boolean state){

        /* Sets PreviousDate button of tab 'Final dataset' enabled true/false. */
        
        btnNextDateFinalDataset.setEnabled(state);

    }
    
    
    @Override
    public void setlblMissingDateFinalDatasetToolTipText(String tiptext){
        
        /* Sets the tool tip text of the label 'lblMissingDateFinalDataset'. */
        lblMissingDateFinalDataset.setToolTipText(tiptext);

    }

    
    @Override
    public void setOutputFolder(String outputFolder){
    
        /* Sets output folder where saving output files. */
        
        jtfOutputFolder.setText(outputFolder);

    }
    
    
    @Override
    public String getOutputFolder(){
    
        /* Gets output folder where saving output files. */
        
        return jtfOutputFolder.getText();

    }    
               
    
    @Override
    public String getOutputFilesFormat(){
    
        /* Gets output files format to create. */
        
        return (String) jcmbOutputFileFormat.getSelectedItem();
        
    }

    
    @Override
    public void setOutputFilesFormat(String outputFilesFormat){
    
        /* Sets output files format to create. */
        
        jcmbOutputFileFormat.setSelectedItem(outputFilesFormat);
        
    }    
                       
    
    @Override
    public void setBtnCreateFinalDatasetsToolTipText(String tiptext){

        /* Sets the tool tip text of the button 'Create final dataset'. */
        
        btnCreateFinalDatasets.setToolTipText(tiptext);

    }    

    
    @Override
    public boolean getOpenDatabasesWithWeka(){
    
        /* Gets open databases with Weka when finished. */
        
        return jcbOpenDatabasesWithWEKA.isSelected();

    }        

    
    @Override
    public void setOpenDatabasesWithWeka(boolean openDatabasesWithWEKA){
    
        /* Sets open databases with Weka when finished. */
        
        jcbOpenDatabasesWithWEKA.setSelected(openDatabasesWithWEKA);

    }
    
    
    @Override
    public void setEnabledOpenDatabasesWithWeka(boolean enabledDisabled){
    
        /* Sets Enabled/Disabled selection: open files with Weka. */
        
        jcbOpenDatabasesWithWEKA.setEnabled(enabledDisabled);

    }    
    
    

    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgTypeOfMatching = new javax.swing.ButtonGroup();
        jTabbedMain = new javax.swing.JTabbedPane();
        jpnBuoys = new javax.swing.JPanel();
        jscrBuoys = new javax.swing.JScrollPane();
        tblBuoys = new javax.swing.JTable();
        btnMainMenuBuoys = new javax.swing.JButton();
        btnNewBuoy = new javax.swing.JButton();
        btnModifyBuoy = new javax.swing.JButton();
        btnDeleteBuoy = new javax.swing.JButton();
        jpnDatasets = new javax.swing.JPanel();
        jscrBuoysDatasets = new javax.swing.JScrollPane();
        tblBuoysDatasets = new javax.swing.JTable();
        btnBackDatasets = new javax.swing.JButton();
        btnMainMenuDatasets = new javax.swing.JButton();
        jpnOriginalDatasets = new javax.swing.JPanel();
        jscrOriginalDatasets = new javax.swing.JScrollPane();
        jlstOriginalDatasets = new javax.swing.JList<>();
        btnNewDataset = new javax.swing.JButton();
        btnDeleteDataset = new javax.swing.JButton();
        btnOpenDataset = new javax.swing.JButton();
        jpnPreprocessedDatasets = new javax.swing.JPanel();
        btnDeletePreprocessedDataset = new javax.swing.JButton();
        jscrPreprocessedDataset = new javax.swing.JScrollPane();
        jlstPreprocessedDatasets = new javax.swing.JList<>();
        btnOpenPreprocessedDataset = new javax.swing.JButton();
        jpnSummaryDataset = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaSummaryDataset = new javax.swing.JTextArea();
        jpnPreprocess = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        jTabbedPreprocess = new javax.swing.JTabbedPane();
        jpnFileInformation = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblStatistics = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblAttributes = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtaSummaryPreprocessed = new javax.swing.JTextArea();
        jpnViewData = new javax.swing.JPanel();
        lblMissingDate = new javax.swing.JLabel();
        lblUnexpectedDate = new javax.swing.JLabel();
        lblDuplicatedDate = new javax.swing.JLabel();
        lblMissingValue = new javax.swing.JLabel();
        jscrPreprocessedData = new javax.swing.JScrollPane();
        tblPreprocessedData = new javax.swing.JTable();
        jscrMissingValueColour = new javax.swing.JScrollPane();
        jtaMissingValueColour = new javax.swing.JTextArea();
        jscrMissingDateColour = new javax.swing.JScrollPane();
        jtaMissingDateColour = new javax.swing.JTextArea();
        jscrUnexpectedDateColour = new javax.swing.JScrollPane();
        jtaUnexpectedDateColour = new javax.swing.JTextArea();
        jscrDuplicatedDateColour = new javax.swing.JScrollPane();
        jtaDuplicatedDateColour = new javax.swing.JTextArea();
        btnPreviousDatePreprocess = new javax.swing.JButton();
        btnNextDatePreprocess = new javax.swing.JButton();
        btnBackPreprocess = new javax.swing.JButton();
        jpnFilter = new javax.swing.JPanel();
        btnApplyFilter = new javax.swing.JButton();
        btnUndo = new javax.swing.JButton();
        btnConfigureFilter = new javax.swing.JButton();
        jscrFilters = new javax.swing.JScrollPane();
        jTFilters = new javax.swing.JTree();
        btnMainMenuPreprocess = new javax.swing.JButton();
        jpnPreprocessedDataset = new javax.swing.JPanel();
        lblSelectedBuoy = new javax.swing.JLabel();
        lblSelectedOriginalDataset = new javax.swing.JLabel();
        jtfSelectedStationIDPreprocess = new javax.swing.JTextField();
        jtfSelectedOriginalDataset = new javax.swing.JTextField();
        lblOpenedDataset = new javax.swing.JLabel();
        jtfOpenedDataset = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        btnRestoreData = new javax.swing.JButton();
        jpnMatching = new javax.swing.JPanel();
        jscrBuoysMatching = new javax.swing.JScrollPane();
        tblBuoysMatching = new javax.swing.JTable();
        jpnMatchingOriginalDatasets = new javax.swing.JPanel();
        jscrMatchingDatasetFiles = new javax.swing.JScrollPane();
        jlstMatchingDatasets = new javax.swing.JList<>();
        btnSelectDataset = new javax.swing.JButton();
        jpnMatchingPreprocessedDatasets = new javax.swing.JPanel();
        jscrMatchingPreprocessedDatasets = new javax.swing.JScrollPane();
        jlstMatchingPreprocessedDatasets = new javax.swing.JList<>();
        btnSelectPreprocessedDataset = new javax.swing.JButton();
        btnMainMenuMatching = new javax.swing.JButton();
        btnBackMatching = new javax.swing.JButton();
        btnLoadMatching = new javax.swing.JButton();
        btnRunMatching = new javax.swing.JButton();
        lblSelectedStationID4 = new javax.swing.JLabel();
        jtfSelectedStationIDMatching = new javax.swing.JTextField();
        lblSelectedDataset4 = new javax.swing.JLabel();
        jtfSelectedMatchingDataset = new javax.swing.JTextField();
        jpnMatchingOutput = new javax.swing.JPanel();
        jcbFluxOfEnergy = new javax.swing.JCheckBox();
        lblAttrituteToPredict5 = new javax.swing.JLabel();
        jcmbAttributeToPredict = new javax.swing.JComboBox<>();
        jpnMatchingInputs = new javax.swing.JPanel();
        jscrReanalysisFiles = new javax.swing.JScrollPane();
        jlstReanalysisFiles = new javax.swing.JList<>();
        btnSelectReanalysisFiles = new javax.swing.JButton();
        lblReanalysisFiles = new javax.swing.JLabel();
        btnSelectBuoyVariables = new javax.swing.JButton();
        jscrBuoyVariables = new javax.swing.JScrollPane();
        jlstBuoyVariables = new javax.swing.JList<>();
        lblBuoyVariables = new javax.swing.JLabel();
        jpnMatchingOptions = new javax.swing.JPanel();
        jcbIncludeMissingDates = new javax.swing.JCheckBox();
        jrbRegression = new javax.swing.JRadioButton();
        jrbClassification = new javax.swing.JRadioButton();
        jrbDirectMatching = new javax.swing.JRadioButton();
        lblNumberOfNearestGeopoints = new javax.swing.JLabel();
        jtfNumberOfNearestGeopoints = new javax.swing.JTextField();
        jcmbNumberOutputFiles = new javax.swing.JComboBox<>();
        lblNumberFinalDatasets = new javax.swing.JLabel();
        jpnFinalDatasets = new javax.swing.JPanel();
        btnMainMenuFinalDatasets = new javax.swing.JButton();
        btnBackFinalDatasets = new javax.swing.JButton();
        jpnClassificationThresholds = new javax.swing.JPanel();
        jscrThresholds = new javax.swing.JScrollPane();
        tblThresholds = new javax.swing.JTable();
        lblDescriptionThreshold = new javax.swing.JLabel();
        jtfDescriptionThreshold = new javax.swing.JTextField();
        btnAddThreshold = new javax.swing.JButton();
        btnModifyThreshold = new javax.swing.JButton();
        btnDeleteThreshold = new javax.swing.JButton();
        lblValueThreshold = new javax.swing.JLabel();
        jtfValueThreshold = new javax.swing.JTextField();
        lblClassThreshold = new javax.swing.JLabel();
        jtfClassThreshold = new javax.swing.JTextField();
        jpnPredictionHorizon = new javax.swing.JPanel();
        lblPredictionHorizon = new javax.swing.JLabel();
        btnIncreaseHorizon = new javax.swing.JButton();
        btnDecreaseHorizon = new javax.swing.JButton();
        jcbSynchroniseRData = new javax.swing.JCheckBox();
        jpnClassificationOutputConfiguration = new javax.swing.JPanel();
        btnOutputFile = new javax.swing.JButton();
        lblFinalDatasetsFormat = new javax.swing.JLabel();
        jcmbOutputFileFormat = new javax.swing.JComboBox<>();
        jcbOpenDatabasesWithWEKA = new javax.swing.JCheckBox();
        btnCreateFinalDatasets = new javax.swing.JButton();
        jtfOutputFolder = new javax.swing.JTextField();
        btnSaveMatching = new javax.swing.JButton();
        lblFinalDatasetVisualise = new javax.swing.JLabel();
        jcmbFinalDatasetToVisualise = new javax.swing.JComboBox<>();
        jscrFinalDataset = new javax.swing.JScrollPane();
        tblFinalDataset = new javax.swing.JTable();
        btnUpdateHorizon = new javax.swing.JButton();
        jscrMissingValueColourFD = new javax.swing.JScrollPane();
        jtaMissingValueColourFD = new javax.swing.JTextArea();
        lblMissingValueFinalDataset = new javax.swing.JLabel();
        jscrMissingDateColourFD = new javax.swing.JScrollPane();
        jtaMissingDateColourFD = new javax.swing.JTextArea();
        lblMissingDateFinalDataset = new javax.swing.JLabel();
        btnPreviousDateFinalDataset = new javax.swing.JButton();
        btnNextDateFinalDataset = new javax.swing.JButton();
        jcbTimeAttribute = new javax.swing.JCheckBox();
        jMenuBar = new javax.swing.JMenuBar();
        jmMenu = new javax.swing.JMenu();
        itemBuoys = new javax.swing.JMenuItem();
        itemDatasets = new javax.swing.JMenuItem();
        itemPreprocess = new javax.swing.JMenuItem();
        itemMatching = new javax.swing.JMenuItem();
        itemMainMenu = new javax.swing.JMenuItem();
        jmHelp = new javax.swing.JMenu();
        itemHelpManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SPAMDA 1.0-Manage buoys data");
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setResizable(false);

        jpnBuoys.setPreferredSize(new java.awt.Dimension(881, 469));

        jscrBuoys.setBorder(null);

        tblBuoys.setBorder(null);
        tblBuoys.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Station ID", "Description", "Latitude", "H", "Longitude", "H", "#TXTFiles"
            }
        ) {

            /* Generated by NetBeans. */
            private static final long serialVersionUID = -1006288877740180822L;

            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBuoys.setToolTipText("Double click to show dataset files of selected buoy");
        tblBuoys.setName("tblBuoys"); // NOI18N
        tblBuoys.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblBuoys.getTableHeader().setReorderingAllowed(false);
        jscrBuoys.setViewportView(tblBuoys);
        if (tblBuoys.getColumnModel().getColumnCount() > 0) {
            tblBuoys.getColumnModel().getColumn(0).setMinWidth(0);
            tblBuoys.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblBuoys.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btnMainMenuBuoys.setText("Main menu");
        btnMainMenuBuoys.setToolTipText("Back to Main menu");

        btnNewBuoy.setText("New");
        btnNewBuoy.setToolTipText("Insert a new buoy");
        btnNewBuoy.setActionCommand("New buoy");

        btnModifyBuoy.setText("View / Modify");
        btnModifyBuoy.setToolTipText("View or modify the selected buoy");

        btnDeleteBuoy.setText("Delete");
        btnDeleteBuoy.setToolTipText("Delete the selected buoy");
        btnDeleteBuoy.setActionCommand("Delete buoy");

        javax.swing.GroupLayout jpnBuoysLayout = new javax.swing.GroupLayout(jpnBuoys);
        jpnBuoys.setLayout(jpnBuoysLayout);
        jpnBuoysLayout.setHorizontalGroup(
            jpnBuoysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnBuoysLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnBuoysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jscrBuoys)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnBuoysLayout.createSequentialGroup()
                        .addComponent(btnMainMenuBuoys, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnNewBuoy, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnModifyBuoy, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteBuoy, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jpnBuoysLayout.setVerticalGroup(
            jpnBuoysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnBuoysLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jscrBuoys, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpnBuoysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteBuoy)
                    .addComponent(btnNewBuoy)
                    .addComponent(btnMainMenuBuoys)
                    .addComponent(btnModifyBuoy))
                .addGap(0, 0, 0))
        );

        jTabbedMain.addTab("Buoys", jpnBuoys);

        jpnDatasets.setPreferredSize(new java.awt.Dimension(881, 469));

        jscrBuoysDatasets.setBorder(null);

        tblBuoysDatasets.setBorder(null);
        tblBuoysDatasets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Station ID"
            }
        ) {

            /* Generated by NetBeans. */
            private static final long serialVersionUID = -1006288877740180822L;

            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBuoysDatasets.setToolTipText("Select a buoy to show intermediate datasets");
        tblBuoysDatasets.setName("tblBuoysDatasets"); // NOI18N
        tblBuoysDatasets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblBuoysDatasets.getTableHeader().setReorderingAllowed(false);
        jscrBuoysDatasets.setViewportView(tblBuoysDatasets);
        if (tblBuoysDatasets.getColumnModel().getColumnCount() > 0) {
            tblBuoysDatasets.getColumnModel().getColumn(0).setMinWidth(0);
            tblBuoysDatasets.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblBuoysDatasets.getColumnModel().getColumn(0).setMaxWidth(0);
        }
        tblBuoysDatasets.getAccessibleContext().setAccessibleName("");

        btnBackDatasets.setText("Back");
        btnBackDatasets.setToolTipText("Back to Buoys");

        btnMainMenuDatasets.setText("Main menu");
        btnMainMenuDatasets.setToolTipText("Back to Main menu");

        jpnOriginalDatasets.setBorder(javax.swing.BorderFactory.createTitledBorder("Intermediate datasets"));

        jlstOriginalDatasets.setToolTipText("Double click to open the selected intermediate dataset");
        jlstOriginalDatasets.setName("jlstOriginalDatasets"); // NOI18N
        jscrOriginalDatasets.setViewportView(jlstOriginalDatasets);
        jlstOriginalDatasets.getAccessibleContext().setAccessibleName("jlstDatasetFiles");

        btnNewDataset.setText("New");
        btnNewDataset.setToolTipText("New intermediate dataset");
        btnNewDataset.setActionCommand("New dataset file");

        btnDeleteDataset.setText("Delete");
        btnDeleteDataset.setToolTipText("Delete the selected intermediate dataset");
        btnDeleteDataset.setActionCommand("Delete dataset file");

        btnOpenDataset.setText("Open");
        btnOpenDataset.setToolTipText("Open the selected intermediate dataset");
        btnOpenDataset.setActionCommand("Open dataset file");

        javax.swing.GroupLayout jpnOriginalDatasetsLayout = new javax.swing.GroupLayout(jpnOriginalDatasets);
        jpnOriginalDatasets.setLayout(jpnOriginalDatasetsLayout);
        jpnOriginalDatasetsLayout.setHorizontalGroup(
            jpnOriginalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnOriginalDatasetsLayout.createSequentialGroup()
                .addComponent(jscrOriginalDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnOriginalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpenDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );
        jpnOriginalDatasetsLayout.setVerticalGroup(
            jpnOriginalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnOriginalDatasetsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnOpenDataset)
                .addGap(18, 18, 18)
                .addComponent(btnNewDataset)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteDataset)
                .addGap(35, 35, 35))
            .addComponent(jscrOriginalDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jpnPreprocessedDatasets.setBorder(javax.swing.BorderFactory.createTitledBorder("Pre-processed datasets"));

        btnDeletePreprocessedDataset.setText("Delete");
        btnDeletePreprocessedDataset.setToolTipText("Delete the selected pre-processed dataset");
        btnDeletePreprocessedDataset.setActionCommand("Delete preprocessed file");

        jlstPreprocessedDatasets.setToolTipText("Double click to open the selected pre-processed dataset");
        jlstPreprocessedDatasets.setName("jlstPreprocessedDatasets"); // NOI18N
        jscrPreprocessedDataset.setViewportView(jlstPreprocessedDatasets);

        btnOpenPreprocessedDataset.setText("Open");
        btnOpenPreprocessedDataset.setToolTipText("Open the selected pre-processed dataset");
        btnOpenPreprocessedDataset.setActionCommand("Open preprocessed file");

        javax.swing.GroupLayout jpnPreprocessedDatasetsLayout = new javax.swing.GroupLayout(jpnPreprocessedDatasets);
        jpnPreprocessedDatasets.setLayout(jpnPreprocessedDatasetsLayout);
        jpnPreprocessedDatasetsLayout.setHorizontalGroup(
            jpnPreprocessedDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnPreprocessedDatasetsLayout.createSequentialGroup()
                .addComponent(jscrPreprocessedDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnPreprocessedDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDeletePreprocessedDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpenPreprocessedDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );
        jpnPreprocessedDatasetsLayout.setVerticalGroup(
            jpnPreprocessedDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnPreprocessedDatasetsLayout.createSequentialGroup()
                .addComponent(btnOpenPreprocessedDataset)
                .addGap(18, 18, 18)
                .addComponent(btnDeletePreprocessedDataset)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jscrPreprocessedDataset)
        );

        jpnSummaryDataset.setBorder(javax.swing.BorderFactory.createTitledBorder("Summary of the selected dataset:"));

        jtaSummaryDataset.setEditable(false);
        jtaSummaryDataset.setBackground(new java.awt.Color(245, 245, 245));
        jtaSummaryDataset.setColumns(20);
        jtaSummaryDataset.setRows(5);
        jtaSummaryDataset.setToolTipText("Summary of the selected dataset");
        jScrollPane2.setViewportView(jtaSummaryDataset);

        javax.swing.GroupLayout jpnSummaryDatasetLayout = new javax.swing.GroupLayout(jpnSummaryDataset);
        jpnSummaryDataset.setLayout(jpnSummaryDatasetLayout);
        jpnSummaryDatasetLayout.setHorizontalGroup(
            jpnSummaryDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
        );
        jpnSummaryDatasetLayout.setVerticalGroup(
            jpnSummaryDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jpnDatasetsLayout = new javax.swing.GroupLayout(jpnDatasets);
        jpnDatasets.setLayout(jpnDatasetsLayout);
        jpnDatasetsLayout.setHorizontalGroup(
            jpnDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnDatasetsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jscrBuoysDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpnOriginalDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpnPreprocessedDatasets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpnSummaryDataset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnDatasetsLayout.createSequentialGroup()
                .addComponent(btnMainMenuDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBackDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpnDatasetsLayout.setVerticalGroup(
            jpnDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnDatasetsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jscrBuoysDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnDatasetsLayout.createSequentialGroup()
                            .addComponent(jpnOriginalDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(17, 17, 17)
                            .addComponent(jpnPreprocessedDatasets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jpnSummaryDataset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jpnDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackDatasets)
                    .addComponent(btnMainMenuDatasets))
                .addGap(9, 9, 9))
        );

        jpnSummaryDataset.getAccessibleContext().setAccessibleName("Summary of selected dataset file:");

        jTabbedMain.addTab("Datasets", jpnDatasets);

        jpnPreprocess.setPreferredSize(new java.awt.Dimension(881, 469));

        btnSave.setText("Save");
        btnSave.setToolTipText("Save pre-processed dataset");
        btnSave.setActionCommand("Save preprocess");
        btnSave.setEnabled(false);

        jTabbedPreprocess.setName("jTabbedPreprocess"); // NOI18N

        jpnFileInformation.setPreferredSize(new java.awt.Dimension(854, 247));

        tblStatistics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Attribute", "Statistic", "Value"
            }
        ) {

            /* Generated by NetBeans. */
            private static final long serialVersionUID = -1006288877740180822L;

            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStatistics.setToolTipText("Statistical values of the selected attribute");
        tblStatistics.setName("tblBuoysDatasets"); // NOI18N
        tblStatistics.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblStatistics.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(tblStatistics);
        if (tblStatistics.getColumnModel().getColumnCount() > 0) {
            tblStatistics.getColumnModel().getColumn(0).setMinWidth(0);
            tblStatistics.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblStatistics.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        tblAttributes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Attribute"
            }
        ) {

            /* Generated by NetBeans. */
            private static final long serialVersionUID = -1006288877740180822L;

            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAttributes.setToolTipText("Attributes of the pre-processed dataset");
        tblAttributes.setName("tblAttributes"); // NOI18N
        tblAttributes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAttributes.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(tblAttributes);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Summary of the pre-processed dataset:"));

        jtaSummaryPreprocessed.setEditable(false);
        jtaSummaryPreprocessed.setBackground(new java.awt.Color(245, 245, 245));
        jtaSummaryPreprocessed.setColumns(20);
        jtaSummaryPreprocessed.setRows(5);
        jtaSummaryPreprocessed.setToolTipText("Summary of the pre-processed dataset");
        jScrollPane4.setViewportView(jtaSummaryPreprocessed);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );

        javax.swing.GroupLayout jpnFileInformationLayout = new javax.swing.GroupLayout(jpnFileInformation);
        jpnFileInformation.setLayout(jpnFileInformationLayout);
        jpnFileInformationLayout.setHorizontalGroup(
            jpnFileInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnFileInformationLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7))
        );
        jpnFileInformationLayout.setVerticalGroup(
            jpnFileInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnFileInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnFileInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPreprocess.addTab("Statistical information", jpnFileInformation);

        jpnViewData.setName("jpnViewData"); // NOI18N

        lblMissingDate.setText("Missing date");
        lblMissingDate.setToolTipText("Missing date (not included in the pre-processed dataset)");

        lblUnexpectedDate.setText("Unexpected date");
        lblUnexpectedDate.setToolTipText("Unexpected date (included in the pre-processed dataset)");

        lblDuplicatedDate.setText("Duplicated date");
        lblDuplicatedDate.setToolTipText("Duplicated date (included in the pre-processed dataset)");

        lblMissingValue.setText("Missing value");
        lblMissingValue.setToolTipText("Current missing values in the pre-processed dataset");

        jscrPreprocessedData.setBorder(null);
        jscrPreprocessedData.setName("jscrPreprocessedData"); // NOI18N

        tblPreprocessedData.setBorder(null);
        tblPreprocessedData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Please, open an intermediate or pre-processed dataset."}
            },
            new String [] {
                "None."
            }
        ) {

            /* Generated by NetBeans. */
            private static final long serialVersionUID = -1006288877740180822L;

            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPreprocessedData.setToolTipText("Content of the pre-processed dataset");
        tblPreprocessedData.setName("tblPreprocessedData"); // NOI18N
        tblPreprocessedData.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblPreprocessedData.getTableHeader().setReorderingAllowed(false);
        jscrPreprocessedData.setViewportView(tblPreprocessedData);

        jscrMissingValueColour.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jscrMissingValueColour.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jtaMissingValueColour.setEditable(false);
        jtaMissingValueColour.setBackground(new java.awt.Color(255, 72, 71));
        jtaMissingValueColour.setColumns(20);
        jtaMissingValueColour.setRows(5);
        jscrMissingValueColour.setViewportView(jtaMissingValueColour);

        jscrMissingDateColour.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jscrMissingDateColour.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jtaMissingDateColour.setEditable(false);
        jtaMissingDateColour.setBackground(new java.awt.Color(212, 141, 249));
        jtaMissingDateColour.setColumns(20);
        jtaMissingDateColour.setRows(5);
        jscrMissingDateColour.setViewportView(jtaMissingDateColour);

        jscrUnexpectedDateColour.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jscrUnexpectedDateColour.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jtaUnexpectedDateColour.setEditable(false);
        jtaUnexpectedDateColour.setBackground(new java.awt.Color(252, 227, 198));
        jtaUnexpectedDateColour.setColumns(20);
        jtaUnexpectedDateColour.setRows(5);
        jscrUnexpectedDateColour.setViewportView(jtaUnexpectedDateColour);

        jscrDuplicatedDateColour.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jscrDuplicatedDateColour.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jtaDuplicatedDateColour.setEditable(false);
        jtaDuplicatedDateColour.setBackground(new java.awt.Color(242, 186, 166));
        jtaDuplicatedDateColour.setColumns(20);
        jtaDuplicatedDateColour.setRows(5);
        jscrDuplicatedDateColour.setViewportView(jtaDuplicatedDateColour);

        btnPreviousDatePreprocess.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        btnPreviousDatePreprocess.setText("<");
        btnPreviousDatePreprocess.setToolTipText("Move to the previous Missing, Unexpected or Duplicated date");
        btnPreviousDatePreprocess.setActionCommand("PreviousDatePreprocess");
        btnPreviousDatePreprocess.setEnabled(false);

        btnNextDatePreprocess.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        btnNextDatePreprocess.setText(">");
        btnNextDatePreprocess.setToolTipText("Move to the next Missing, Unexpected or Duplicated date");
        btnNextDatePreprocess.setActionCommand("NextDatePreprocess");
        btnNextDatePreprocess.setEnabled(false);

        javax.swing.GroupLayout jpnViewDataLayout = new javax.swing.GroupLayout(jpnViewData);
        jpnViewData.setLayout(jpnViewDataLayout);
        jpnViewDataLayout.setHorizontalGroup(
            jpnViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jscrPreprocessedData, javax.swing.GroupLayout.DEFAULT_SIZE, 854, Short.MAX_VALUE)
            .addGroup(jpnViewDataLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jscrMissingDateColour, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(lblMissingDate)
                .addGap(20, 20, 20)
                .addComponent(jscrUnexpectedDateColour, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(lblUnexpectedDate)
                .addGap(20, 20, 20)
                .addComponent(jscrDuplicatedDateColour, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(lblDuplicatedDate)
                .addGap(56, 56, 56)
                .addComponent(btnPreviousDatePreprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnNextDatePreprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jscrMissingValueColour, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(lblMissingValue)
                .addContainerGap())
        );
        jpnViewDataLayout.setVerticalGroup(
            jpnViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnViewDataLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jpnViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMissingValue)
                    .addComponent(jscrMissingDateColour, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jscrUnexpectedDateColour, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jscrMissingValueColour, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPreviousDatePreprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnNextDatePreprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblMissingDate)
                    .addComponent(lblUnexpectedDate)
                    .addGroup(jpnViewDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblDuplicatedDate)
                        .addComponent(jscrDuplicatedDateColour, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jscrPreprocessedData, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
        );

        jTabbedPreprocess.addTab("Content", jpnViewData);

        btnBackPreprocess.setText("Back");
        btnBackPreprocess.setToolTipText("Back to Datasets");

        jpnFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Filter")));

        btnApplyFilter.setText("Apply");
        btnApplyFilter.setToolTipText("Apply the selected filter");
        btnApplyFilter.setActionCommand("Apply filter");

        btnUndo.setText("Undo");
        btnUndo.setToolTipText("Undo the last filter applied");
        btnUndo.setActionCommand("Undo filter");
        btnUndo.setEnabled(false);

        btnConfigureFilter.setText("Configure");
        btnConfigureFilter.setToolTipText("Configure parameters of the selected filter");
        btnConfigureFilter.setActionCommand("Configure filter");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Filters");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Attribute");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Normalize");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Remove");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("RemoveByName");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ReplaceMissingValues");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ReplaceMissingWithUserConstant");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Instance");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("RemoveDuplicates");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("RemoveWithValues");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("SubsetByExpression");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Recover missing data");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Replace missing values with next nearest hour");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Replace missing values with previous nearest hour");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Replace missing values with next hours mean");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Replace missing values with previous hours mean");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Replace missing values with symmetric hours mean");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTFilters.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTFilters.setToolTipText("Select the filter to apply");
        jTFilters.setDropMode(javax.swing.DropMode.ON);
        jTFilters.setName("jTFilters"); // NOI18N
        jTFilters.setRootVisible(false);
        jTFilters.setToggleClickCount(1);
        jscrFilters.setViewportView(jTFilters);

        javax.swing.GroupLayout jpnFilterLayout = new javax.swing.GroupLayout(jpnFilter);
        jpnFilter.setLayout(jpnFilterLayout);
        jpnFilterLayout.setHorizontalGroup(
            jpnFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnFilterLayout.createSequentialGroup()
                .addComponent(jscrFilters)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnConfigureFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnApplyFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUndo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jpnFilterLayout.setVerticalGroup(
            jpnFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnFilterLayout.createSequentialGroup()
                .addComponent(btnConfigureFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApplyFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUndo)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jscrFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        btnMainMenuPreprocess.setText("Main menu");
        btnMainMenuPreprocess.setToolTipText("Back to Main menu");

        jpnPreprocessedDataset.setBorder(javax.swing.BorderFactory.createTitledBorder("Pre-processed dataset"));

        lblSelectedBuoy.setText("Station ID");

        lblSelectedOriginalDataset.setText("Intermediate dataset");

        jtfSelectedStationIDPreprocess.setEditable(false);

        jtfSelectedOriginalDataset.setEditable(false);

        lblOpenedDataset.setText("Opened dataset");

        jtfOpenedDataset.setEditable(false);

        javax.swing.GroupLayout jpnPreprocessedDatasetLayout = new javax.swing.GroupLayout(jpnPreprocessedDataset);
        jpnPreprocessedDataset.setLayout(jpnPreprocessedDatasetLayout);
        jpnPreprocessedDatasetLayout.setHorizontalGroup(
            jpnPreprocessedDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnPreprocessedDatasetLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jpnPreprocessedDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSelectedBuoy)
                    .addComponent(lblSelectedOriginalDataset)
                    .addComponent(lblOpenedDataset))
                .addGap(8, 8, 8)
                .addGroup(jpnPreprocessedDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfSelectedStationIDPreprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnPreprocessedDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jtfOpenedDataset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                        .addComponent(jtfSelectedOriginalDataset, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(0, 0, 0))
        );
        jpnPreprocessedDatasetLayout.setVerticalGroup(
            jpnPreprocessedDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnPreprocessedDatasetLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jpnPreprocessedDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectedBuoy)
                    .addComponent(jtfSelectedStationIDPreprocess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpnPreprocessedDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfSelectedOriginalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectedOriginalDataset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpnPreprocessedDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfOpenedDataset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOpenedDataset))
                .addGap(4, 4, 4))
        );

        btnBrowse.setText("Open dataset");
        btnBrowse.setToolTipText("Open an intermediate or pre-processed dataset");

        btnRestoreData.setText("Restore data");
        btnRestoreData.setToolTipText("Restore original data of pre-processed dataset");
        btnRestoreData.setEnabled(false);

        javax.swing.GroupLayout jpnPreprocessLayout = new javax.swing.GroupLayout(jpnPreprocess);
        jpnPreprocess.setLayout(jpnPreprocessLayout);
        jpnPreprocessLayout.setHorizontalGroup(
            jpnPreprocessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnPreprocessLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnPreprocessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPreprocess)
                    .addGroup(jpnPreprocessLayout.createSequentialGroup()
                        .addComponent(jpnPreprocessedDataset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpnFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnPreprocessLayout.createSequentialGroup()
                        .addComponent(btnMainMenuPreprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBackPreprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRestoreData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jpnPreprocessLayout.setVerticalGroup(
            jpnPreprocessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnPreprocessLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jpnPreprocessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpnPreprocessedDataset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addComponent(jTabbedPreprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpnPreprocessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackPreprocess)
                    .addComponent(btnSave)
                    .addComponent(btnMainMenuPreprocess)
                    .addComponent(btnBrowse)
                    .addComponent(btnRestoreData))
                .addContainerGap())
        );

        jTabbedMain.addTab("Pre-process", jpnPreprocess);

        jpnMatching.setPreferredSize(new java.awt.Dimension(881, 469));

        jscrBuoysMatching.setBorder(null);

        tblBuoysMatching.setBorder(null);
        tblBuoysMatching.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Station ID"
            }
        ) {

            /* Generated by NetBeans. */
            private static final long serialVersionUID = -1006288877740180822L;

            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBuoysMatching.setToolTipText("Select a buoy to show the intermediate datasets");
        tblBuoysMatching.setName("tblBuoysMatching"); // NOI18N
        tblBuoysMatching.getTableHeader().setReorderingAllowed(false);
        jscrBuoysMatching.setViewportView(tblBuoysMatching);
        if (tblBuoysMatching.getColumnModel().getColumnCount() > 0) {
            tblBuoysMatching.getColumnModel().getColumn(0).setMinWidth(0);
            tblBuoysMatching.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblBuoysMatching.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        jpnMatchingOriginalDatasets.setBorder(javax.swing.BorderFactory.createTitledBorder("Intermediate datasets"));

        jlstMatchingDatasets.setToolTipText("Double click to select the intermediate dataset");
        jlstMatchingDatasets.setName("jlstMatchingDatasets"); // NOI18N
        jscrMatchingDatasetFiles.setViewportView(jlstMatchingDatasets);

        btnSelectDataset.setText("Select");
        btnSelectDataset.setToolTipText("Select the intermediate dataset");
        btnSelectDataset.setActionCommand("Select dataset file");

        javax.swing.GroupLayout jpnMatchingOriginalDatasetsLayout = new javax.swing.GroupLayout(jpnMatchingOriginalDatasets);
        jpnMatchingOriginalDatasets.setLayout(jpnMatchingOriginalDatasetsLayout);
        jpnMatchingOriginalDatasetsLayout.setHorizontalGroup(
            jpnMatchingOriginalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingOriginalDatasetsLayout.createSequentialGroup()
                .addGroup(jpnMatchingOriginalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jscrMatchingDatasetFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnMatchingOriginalDatasetsLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(btnSelectDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        jpnMatchingOriginalDatasetsLayout.setVerticalGroup(
            jpnMatchingOriginalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingOriginalDatasetsLayout.createSequentialGroup()
                .addComponent(jscrMatchingDatasetFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(btnSelectDataset)
                .addContainerGap())
        );

        jpnMatchingPreprocessedDatasets.setBorder(javax.swing.BorderFactory.createTitledBorder("Pre-processed datasets"));

        jlstMatchingPreprocessedDatasets.setToolTipText("Double click to select the pre-processed dataset");
        jlstMatchingPreprocessedDatasets.setName("jlstMatchingPreprocessedDatasets"); // NOI18N
        jscrMatchingPreprocessedDatasets.setViewportView(jlstMatchingPreprocessedDatasets);

        btnSelectPreprocessedDataset.setText("Select");
        btnSelectPreprocessedDataset.setToolTipText("Select the pre-processed dataset");
        btnSelectPreprocessedDataset.setActionCommand("Select preprocessed dataset file");

        javax.swing.GroupLayout jpnMatchingPreprocessedDatasetsLayout = new javax.swing.GroupLayout(jpnMatchingPreprocessedDatasets);
        jpnMatchingPreprocessedDatasets.setLayout(jpnMatchingPreprocessedDatasetsLayout);
        jpnMatchingPreprocessedDatasetsLayout.setHorizontalGroup(
            jpnMatchingPreprocessedDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingPreprocessedDatasetsLayout.createSequentialGroup()
                .addGroup(jpnMatchingPreprocessedDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jscrMatchingPreprocessedDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnMatchingPreprocessedDatasetsLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(btnSelectPreprocessedDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        jpnMatchingPreprocessedDatasetsLayout.setVerticalGroup(
            jpnMatchingPreprocessedDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingPreprocessedDatasetsLayout.createSequentialGroup()
                .addComponent(jscrMatchingPreprocessedDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(btnSelectPreprocessedDataset)
                .addContainerGap())
        );

        btnMainMenuMatching.setText("Main menu");
        btnMainMenuMatching.setToolTipText("Back to Main menu");

        btnBackMatching.setText("Back");
        btnBackMatching.setToolTipText("Back to Preprocess");

        btnLoadMatching.setText("Load config.");
        btnLoadMatching.setToolTipText("Load matching configuration");
        btnLoadMatching.setActionCommand("Load matching");

        btnRunMatching.setText("Run");
        btnRunMatching.setToolTipText("Run matching process and go to tab Classification");
        btnRunMatching.setActionCommand("Run matching");

        lblSelectedStationID4.setText("Station ID");

        jtfSelectedStationIDMatching.setEditable(false);
        jtfSelectedStationIDMatching.setToolTipText("Selected buoy for matching process");

        lblSelectedDataset4.setText("Selected dataset:");

        jtfSelectedMatchingDataset.setEditable(false);
        jtfSelectedMatchingDataset.setToolTipText("Selected dataset for matching process");

        jpnMatchingOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        jcbFluxOfEnergy.setText("Flux of energy");
        jcbFluxOfEnergy.setToolTipText("<html><br>Flux of energy as output.<br><br>Flux of energy will be calculated as: 0.49 * (WVHT*WVHT) * APD.  Where:<br><br>WVHT is the buoy variable that indicates the average significant wave height.<br>APD is the buoy variable that indicates the average wave period.<br><br></html>");
        jcbFluxOfEnergy.setActionCommand("Flux of energy changed");

        lblAttrituteToPredict5.setText("Attribute to predict:");
        lblAttrituteToPredict5.setToolTipText("Attribute to predict as output.");

        jcmbAttributeToPredict.setToolTipText("Attribute of the buoy to use as output");
        jcmbAttributeToPredict.setActionCommand("Attribute to predict changed");

        javax.swing.GroupLayout jpnMatchingOutputLayout = new javax.swing.GroupLayout(jpnMatchingOutput);
        jpnMatchingOutput.setLayout(jpnMatchingOutputLayout);
        jpnMatchingOutputLayout.setHorizontalGroup(
            jpnMatchingOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingOutputLayout.createSequentialGroup()
                .addComponent(jcbFluxOfEnergy)
                .addGap(24, 24, 24)
                .addComponent(lblAttrituteToPredict5)
                .addGap(4, 4, 4)
                .addComponent(jcmbAttributeToPredict, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        jpnMatchingOutputLayout.setVerticalGroup(
            jpnMatchingOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingOutputLayout.createSequentialGroup()
                .addGroup(jpnMatchingOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAttrituteToPredict5)
                    .addComponent(jcmbAttributeToPredict, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbFluxOfEnergy))
                .addGap(0, 0, 0))
        );

        jpnMatchingInputs.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        jlstReanalysisFiles.setToolTipText("Reanalysis data files to use in matching process");
        jlstReanalysisFiles.setName("jlstReanalysisPreprocessedDatasets"); // NOI18N
        jscrReanalysisFiles.setViewportView(jlstReanalysisFiles);

        btnSelectReanalysisFiles.setText("Add");
        btnSelectReanalysisFiles.setToolTipText("Modifiy the reanalysis data files selection");
        btnSelectReanalysisFiles.setActionCommand("ModifyRenalysisFiles");

        lblReanalysisFiles.setText("Reanalysis data files");
        lblReanalysisFiles.setToolTipText("");

        btnSelectBuoyVariables.setText("Add");
        btnSelectBuoyVariables.setToolTipText("Modifiy the attributes of the buoy selection");
        btnSelectBuoyVariables.setActionCommand("ModifyBuoyVariables");

        jlstBuoyVariables.setToolTipText("Attributes of the buoy to use in matching process");
        jlstBuoyVariables.setName("jlstReanalysisPreprocessedDatasets"); // NOI18N
        jscrBuoyVariables.setViewportView(jlstBuoyVariables);

        lblBuoyVariables.setText("Buoy attributes");

        javax.swing.GroupLayout jpnMatchingInputsLayout = new javax.swing.GroupLayout(jpnMatchingInputs);
        jpnMatchingInputs.setLayout(jpnMatchingInputsLayout);
        jpnMatchingInputsLayout.setHorizontalGroup(
            jpnMatchingInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingInputsLayout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(btnSelectReanalysisFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSelectBuoyVariables, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jpnMatchingInputsLayout.createSequentialGroup()
                .addGroup(jpnMatchingInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnMatchingInputsLayout.createSequentialGroup()
                        .addComponent(lblReanalysisFiles)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jscrReanalysisFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(jpnMatchingInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBuoyVariables)
                    .addComponent(jscrBuoyVariables, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jpnMatchingInputsLayout.setVerticalGroup(
            jpnMatchingInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingInputsLayout.createSequentialGroup()
                .addGroup(jpnMatchingInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jscrBuoyVariables, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnMatchingInputsLayout.createSequentialGroup()
                        .addGroup(jpnMatchingInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblReanalysisFiles)
                            .addComponent(lblBuoyVariables))
                        .addGap(3, 3, 3)
                        .addComponent(jscrReanalysisFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnMatchingInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectReanalysisFiles)
                    .addComponent(btnSelectBuoyVariables))
                .addGap(2, 2, 2))
        );

        btnSelectBuoyVariables.getAccessibleContext().setAccessibleDescription("Modify the variables of the buoy selection");

        jpnMatchingOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Matching options"));

        jcbIncludeMissingDates.setText("Include missing dates (as missing measurements)");
        jcbIncludeMissingDates.setToolTipText("If selected, the final datasets will have the missing dates of the selected dataset");

        bgTypeOfMatching.add(jrbRegression);
        jrbRegression.setText("Regression");
        jrbRegression.setToolTipText("Regression");

        bgTypeOfMatching.add(jrbClassification);
        jrbClassification.setText("Classification");
        jrbClassification.setToolTipText("Classification");

        bgTypeOfMatching.add(jrbDirectMatching);
        jrbDirectMatching.setSelected(true);
        jrbDirectMatching.setText("Direct matching");
        jrbDirectMatching.setToolTipText("Direct matching");

        lblNumberOfNearestGeopoints.setText("Nearest reanalysis nodes to consider (max 0):");
        lblNumberOfNearestGeopoints.setToolTipText("");

        jtfNumberOfNearestGeopoints.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfNumberOfNearestGeopoints.setText("4");
        jtfNumberOfNearestGeopoints.setToolTipText("Number of the nearest reanalysis nodes to consider in matching process");
        jtfNumberOfNearestGeopoints.setName("NumberOfNearestGeopoints"); // NOI18N

        jcmbNumberOutputFiles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "One (using weighted mean of nearest reanalysis nodes)", "'N' (one per each reanalysis node)" }));
        jcmbNumberOutputFiles.setToolTipText("<html>Number of final datasets that will be created:<br>One final dataset using weighted mean of nearest geopoints<br>'N' final datasets (one per each geopoint)</html>");

        lblNumberFinalDatasets.setText("Number of final datasets:");
        lblNumberFinalDatasets.setToolTipText("");

        javax.swing.GroupLayout jpnMatchingOptionsLayout = new javax.swing.GroupLayout(jpnMatchingOptions);
        jpnMatchingOptions.setLayout(jpnMatchingOptionsLayout);
        jpnMatchingOptionsLayout.setHorizontalGroup(
            jpnMatchingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingOptionsLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jpnMatchingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbIncludeMissingDates)
                    .addGroup(jpnMatchingOptionsLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jpnMatchingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnMatchingOptionsLayout.createSequentialGroup()
                                .addComponent(lblNumberOfNearestGeopoints)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfNumberOfNearestGeopoints, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblNumberFinalDatasets)
                            .addComponent(jcmbNumberOutputFiles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpnMatchingOptionsLayout.createSequentialGroup()
                        .addComponent(jrbDirectMatching)
                        .addGap(22, 22, 22)
                        .addComponent(jrbClassification)
                        .addGap(22, 22, 22)
                        .addComponent(jrbRegression)))
                .addGap(0, 0, 0))
        );
        jpnMatchingOptionsLayout.setVerticalGroup(
            jpnMatchingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingOptionsLayout.createSequentialGroup()
                .addComponent(jcbIncludeMissingDates)
                .addGap(5, 5, 5)
                .addGroup(jpnMatchingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumberOfNearestGeopoints)
                    .addComponent(jtfNumberOfNearestGeopoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(lblNumberFinalDatasets)
                .addGap(5, 5, 5)
                .addComponent(jcmbNumberOutputFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jpnMatchingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbClassification)
                    .addComponent(jrbDirectMatching)
                    .addComponent(jrbRegression))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jpnMatchingLayout = new javax.swing.GroupLayout(jpnMatching);
        jpnMatching.setLayout(jpnMatchingLayout);
        jpnMatchingLayout.setHorizontalGroup(
            jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpnMatchingLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnMainMenuMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBackMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLoadMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRunMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpnMatchingLayout.createSequentialGroup()
                        .addComponent(jscrBuoysMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jpnMatchingOriginalDatasets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpnMatchingPreprocessedDatasets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnMatchingLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSelectedStationID4)
                                    .addGroup(jpnMatchingLayout.createSequentialGroup()
                                        .addComponent(lblSelectedDataset4)
                                        .addGap(4, 4, 4)
                                        .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jtfSelectedStationIDMatching, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                            .addComponent(jtfSelectedMatchingDataset)))))
                            .addComponent(jpnMatchingInputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpnMatchingOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpnMatchingOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(12, 12, 12))
        );
        jpnMatchingLayout.setVerticalGroup(
            jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnMatchingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnMatchingLayout.createSequentialGroup()
                        .addComponent(jpnMatchingOriginalDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpnMatchingPreprocessedDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jscrBuoysMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnMatchingLayout.createSequentialGroup()
                        .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSelectedStationID4)
                            .addComponent(jtfSelectedStationIDMatching, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSelectedDataset4)
                            .addComponent(jtfSelectedMatchingDataset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addComponent(jpnMatchingOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2)
                        .addComponent(jpnMatchingInputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2)
                        .addComponent(jpnMatchingOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnMatchingLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jpnMatchingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBackMatching)
                            .addComponent(btnMainMenuMatching)
                            .addComponent(btnLoadMatching)))
                    .addGroup(jpnMatchingLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnRunMatching)))
                .addContainerGap())
        );

        jTabbedMain.addTab("Matching configuration", jpnMatching);

        btnMainMenuFinalDatasets.setText("Main menu");
        btnMainMenuFinalDatasets.setToolTipText("Back to Main menu");

        btnBackFinalDatasets.setText("Back");
        btnBackFinalDatasets.setToolTipText("Back to Matching configuration");

        jpnClassificationThresholds.setBorder(javax.swing.BorderFactory.createTitledBorder("Thresholds of the attribute XXXXX:    max: 9999    min: 9999    #instances: 9999"));

        jscrThresholds.setBorder(null);

        tblThresholds.setBorder(null);
        tblThresholds.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class", "Description", "# Instances", "Inferior [", "Superior )"
            }
        ) {
            Class<?>[] types = new Class<?> [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };

            /* Generated by NetBeans. */
            private static final long serialVersionUID = -6158042587124966771L;

            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class<?> getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblThresholds.setToolTipText("Current thresholds of the output attribute");
        tblThresholds.setName("tblThresholds"); // NOI18N
        tblThresholds.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblThresholds.getTableHeader().setReorderingAllowed(false);
        jscrThresholds.setViewportView(tblThresholds);

        lblDescriptionThreshold.setText("Description");

        jtfDescriptionThreshold.setToolTipText("Description of the threshold");

        btnAddThreshold.setText("Add");
        btnAddThreshold.setToolTipText("Add a new threshold");
        btnAddThreshold.setActionCommand("Add threshold");

        btnModifyThreshold.setText("<html>Modify<br>threshold</html>");
        btnModifyThreshold.setToolTipText("Modify the selected threshold");
        btnModifyThreshold.setActionCommand("Modify threshold");

        btnDeleteThreshold.setText("Delete");
        btnDeleteThreshold.setToolTipText("Delete the selected threshold");
        btnDeleteThreshold.setActionCommand("Delete threshold");

        lblValueThreshold.setText("Threshold");

        jtfValueThreshold.setToolTipText("Value of the threshold");

        lblClassThreshold.setText("Class");

        jtfClassThreshold.setToolTipText("Class of the threshold");

        javax.swing.GroupLayout jpnClassificationThresholdsLayout = new javax.swing.GroupLayout(jpnClassificationThresholds);
        jpnClassificationThresholds.setLayout(jpnClassificationThresholdsLayout);
        jpnClassificationThresholdsLayout.setHorizontalGroup(
            jpnClassificationThresholdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnClassificationThresholdsLayout.createSequentialGroup()
                .addGroup(jpnClassificationThresholdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnClassificationThresholdsLayout.createSequentialGroup()
                        .addComponent(jscrThresholds, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addGroup(jpnClassificationThresholdsLayout.createSequentialGroup()
                        .addGroup(jpnClassificationThresholdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblClassThreshold)
                            .addComponent(jtfClassThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnClassificationThresholdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnClassificationThresholdsLayout.createSequentialGroup()
                                .addComponent(lblDescriptionThreshold)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jtfDescriptionThreshold))
                        .addGap(6, 6, 6)
                        .addGroup(jpnClassificationThresholdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfValueThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblValueThreshold))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jpnClassificationThresholdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnDeleteThreshold, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModifyThreshold, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(btnAddThreshold, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        jpnClassificationThresholdsLayout.setVerticalGroup(
            jpnClassificationThresholdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnClassificationThresholdsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnModifyThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteThreshold))
            .addGroup(jpnClassificationThresholdsLayout.createSequentialGroup()
                .addComponent(jscrThresholds, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jpnClassificationThresholdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnClassificationThresholdsLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnAddThreshold))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnClassificationThresholdsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jpnClassificationThresholdsLayout.createSequentialGroup()
                            .addComponent(lblDescriptionThreshold)
                            .addGap(0, 0, 0)
                            .addComponent(jtfDescriptionThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jpnClassificationThresholdsLayout.createSequentialGroup()
                            .addComponent(lblClassThreshold)
                            .addGap(0, 0, 0)
                            .addComponent(jtfClassThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jpnClassificationThresholdsLayout.createSequentialGroup()
                            .addComponent(lblValueThreshold)
                            .addGap(0, 0, 0)
                            .addComponent(jtfValueThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        jpnPredictionHorizon.setBorder(javax.swing.BorderFactory.createTitledBorder("Prediction horizon"));

        lblPredictionHorizon.setText("00 days and 00 hours");

        btnIncreaseHorizon.setText("+");
        btnIncreaseHorizon.setToolTipText("Increase prediction horizon");
        btnIncreaseHorizon.setActionCommand("Increase prediction horizon");

        btnDecreaseHorizon.setText("-");
        btnDecreaseHorizon.setToolTipText("Decrease prediction horizon");
        btnDecreaseHorizon.setActionCommand("Decrease prediction horizon");

        jcbSynchroniseRData.setText("Synchronise the reanalysis data");
        jcbSynchroniseRData.setToolTipText("Synchronise the reanalysis data with the output attribute");

        javax.swing.GroupLayout jpnPredictionHorizonLayout = new javax.swing.GroupLayout(jpnPredictionHorizon);
        jpnPredictionHorizon.setLayout(jpnPredictionHorizonLayout);
        jpnPredictionHorizonLayout.setHorizontalGroup(
            jpnPredictionHorizonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnPredictionHorizonLayout.createSequentialGroup()
                .addGroup(jpnPredictionHorizonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnPredictionHorizonLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(lblPredictionHorizon))
                    .addGroup(jpnPredictionHorizonLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(btnDecreaseHorizon, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIncreaseHorizon, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jcbSynchroniseRData))
                .addGap(0, 0, 0))
        );
        jpnPredictionHorizonLayout.setVerticalGroup(
            jpnPredictionHorizonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnPredictionHorizonLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jcbSynchroniseRData)
                .addGap(12, 12, 12)
                .addComponent(lblPredictionHorizon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnPredictionHorizonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDecreaseHorizon)
                    .addComponent(btnIncreaseHorizon))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpnClassificationOutputConfiguration.setBorder(javax.swing.BorderFactory.createTitledBorder("Output configuration"));

        btnOutputFile.setText("Output path file ...");
        btnOutputFile.setToolTipText("Select the folder to save the final datasets");
        btnOutputFile.setActionCommand("Output file");

        lblFinalDatasetsFormat.setText("Final datasets format:");

        jcmbOutputFileFormat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ARFF", "CSV" }));
        jcmbOutputFileFormat.setToolTipText("File format of the final datasets");
        jcmbOutputFileFormat.setActionCommand("Final datasets format changed");

        jcbOpenDatabasesWithWEKA.setText("Open final datasets with WEKA");
        jcbOpenDatabasesWithWEKA.setToolTipText("If selected, the final datasets will be opened with WEKA");

        btnCreateFinalDatasets.setText("Create final datasets");
        btnCreateFinalDatasets.setToolTipText("Create the final datasets");
        btnCreateFinalDatasets.setEnabled(false);

        jtfOutputFolder.setEditable(false);
        jtfOutputFolder.setToolTipText("Selected folder to save the final datasets");

        javax.swing.GroupLayout jpnClassificationOutputConfigurationLayout = new javax.swing.GroupLayout(jpnClassificationOutputConfiguration);
        jpnClassificationOutputConfiguration.setLayout(jpnClassificationOutputConfigurationLayout);
        jpnClassificationOutputConfigurationLayout.setHorizontalGroup(
            jpnClassificationOutputConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnClassificationOutputConfigurationLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jpnClassificationOutputConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnClassificationOutputConfigurationLayout.createSequentialGroup()
                        .addComponent(jtfOutputFolder, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                        .addGap(2, 2, 2))
                    .addComponent(btnOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbOpenDatabasesWithWEKA)
                    .addGroup(jpnClassificationOutputConfigurationLayout.createSequentialGroup()
                        .addComponent(lblFinalDatasetsFormat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcmbOutputFileFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(jpnClassificationOutputConfigurationLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(btnCreateFinalDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        jpnClassificationOutputConfigurationLayout.setVerticalGroup(
            jpnClassificationOutputConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnClassificationOutputConfigurationLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(btnOutputFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfOutputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jpnClassificationOutputConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFinalDatasetsFormat)
                    .addComponent(jcmbOutputFileFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jcbOpenDatabasesWithWEKA)
                .addGap(15, 15, 15)
                .addComponent(btnCreateFinalDatasets)
                .addGap(7, 7, 7))
        );

        btnSaveMatching.setText("Save config.");
        btnSaveMatching.setToolTipText("Save the matching configuration");
        btnSaveMatching.setActionCommand("Save matching");

        lblFinalDatasetVisualise.setText("Show");

        jcmbFinalDatasetToVisualise.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Select --" }));
        jcmbFinalDatasetToVisualise.setActionCommand("Final dataset to visualise changed");

        jscrFinalDataset.setBorder(null);
        jscrFinalDataset.setName("jscrFinalDataset"); // NOI18N

        tblFinalDataset.setBorder(null);
        tblFinalDataset.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Please, open an intermedidate or pre-processed dataset."}
            },
            new String [] {
                "None."
            }
        ) {

            /* Generated by NetBeans. */
            private static final long serialVersionUID = -1006288877740180822L;

            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFinalDataset.setToolTipText("Content of the selected final dataset");
        tblFinalDataset.setName("tblFinalDataset"); // NOI18N
        tblFinalDataset.getTableHeader().setReorderingAllowed(false);
        jscrFinalDataset.setViewportView(tblFinalDataset);

        btnUpdateHorizon.setText("Update final dataset");
        btnUpdateHorizon.setToolTipText("Update the final datasets with typed configuration");

        jscrMissingValueColourFD.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jscrMissingValueColourFD.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jtaMissingValueColourFD.setEditable(false);
        jtaMissingValueColourFD.setBackground(new java.awt.Color(255, 72, 71));
        jtaMissingValueColourFD.setColumns(20);
        jtaMissingValueColourFD.setRows(5);
        jscrMissingValueColourFD.setViewportView(jtaMissingValueColourFD);

        lblMissingValueFinalDataset.setText("<html>Missing<br>value</html>");
        lblMissingValueFinalDataset.setToolTipText("Current missing values in the final dataset");

        jscrMissingDateColourFD.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jscrMissingDateColourFD.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jtaMissingDateColourFD.setEditable(false);
        jtaMissingDateColourFD.setBackground(new java.awt.Color(212, 141, 249));
        jtaMissingDateColourFD.setColumns(20);
        jtaMissingDateColourFD.setRows(5);
        jscrMissingDateColourFD.setViewportView(jtaMissingDateColourFD);

        lblMissingDateFinalDataset.setText("<html>Missing<br>date</html>");
        lblMissingDateFinalDataset.setToolTipText("Missing date (not included in the final dataset)");

        btnPreviousDateFinalDataset.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        btnPreviousDateFinalDataset.setText("<");
        btnPreviousDateFinalDataset.setToolTipText("Move to the previous Missing date");
        btnPreviousDateFinalDataset.setActionCommand("PreviousDateFinalDataset");

        btnNextDateFinalDataset.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        btnNextDateFinalDataset.setText(">");
        btnNextDateFinalDataset.setToolTipText("Move to the next Missing date");
        btnNextDateFinalDataset.setActionCommand("NextDateFinalDataset");

        jcbTimeAttribute.setText("Show date");
        jcbTimeAttribute.setToolTipText("The date will not be included in the final dataset");
        jcbTimeAttribute.setActionCommand("Show DATE attribute");
        jcbTimeAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTimeAttributeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnFinalDatasetsLayout = new javax.swing.GroupLayout(jpnFinalDatasets);
        jpnFinalDatasets.setLayout(jpnFinalDatasetsLayout);
        jpnFinalDatasetsLayout.setHorizontalGroup(
            jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnFinalDatasetsLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpnFinalDatasetsLayout.createSequentialGroup()
                        .addComponent(btnMainMenuFinalDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBackFinalDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSaveMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpnFinalDatasetsLayout.createSequentialGroup()
                        .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnFinalDatasetsLayout.createSequentialGroup()
                                .addComponent(lblFinalDatasetVisualise)
                                .addGap(6, 6, 6)
                                .addComponent(jcmbFinalDatasetToVisualise, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(jcbTimeAttribute)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jscrMissingValueColourFD, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(lblMissingValueFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(jscrMissingDateColourFD, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(lblMissingDateFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(btnPreviousDateFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNextDateFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))
                            .addGroup(jpnFinalDatasetsLayout.createSequentialGroup()
                                .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jscrFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jpnClassificationThresholds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jpnPredictionHorizon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jpnClassificationOutputConfiguration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnFinalDatasetsLayout.createSequentialGroup()
                                .addComponent(btnUpdateHorizon)
                                .addGap(38, 38, 38)))))
                .addGap(12, 12, 12))
        );
        jpnFinalDatasetsLayout.setVerticalGroup(
            jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnFinalDatasetsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpnClassificationThresholds, javax.swing.GroupLayout.PREFERRED_SIZE, 195, Short.MAX_VALUE)
                    .addGroup(jpnFinalDatasetsLayout.createSequentialGroup()
                        .addComponent(jpnPredictionHorizon, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateHorizon)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnFinalDatasetsLayout.createSequentialGroup()
                        .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMissingValueFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnPreviousDateFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnNextDateFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpnFinalDatasetsLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jscrMissingValueColourFD, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblFinalDatasetVisualise)
                                .addComponent(jcmbFinalDatasetToVisualise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jcbTimeAttribute))
                            .addComponent(lblMissingDateFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpnFinalDatasetsLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jscrMissingDateColourFD, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jscrFinalDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpnClassificationOutputConfiguration, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSaveMatching)
                    .addGroup(jpnFinalDatasetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBackFinalDatasets)
                        .addComponent(btnMainMenuFinalDatasets)))
                .addContainerGap())
        );

        jTabbedMain.addTab("Final datasets", jpnFinalDatasets);

        jmMenu.setText("Menu");

        itemBuoys.setText("Buoys");
        itemBuoys.setToolTipText("Go to Buoys");
        jmMenu.add(itemBuoys);

        itemDatasets.setText("Datasets");
        itemDatasets.setToolTipText("Go to Datasets");
        jmMenu.add(itemDatasets);

        itemPreprocess.setText("Pre-process");
        itemPreprocess.setToolTipText("Go to Preprocess");
        jmMenu.add(itemPreprocess);

        itemMatching.setText("Matching configuration");
        itemMatching.setToolTipText("Go to Matching configuration");
        jmMenu.add(itemMatching);

        itemMainMenu.setText("Main menu");
        itemMainMenu.setToolTipText("Back to Main menu");
        jmMenu.add(itemMainMenu);

        jMenuBar.add(jmMenu);

        jmHelp.setText("Help");

        itemHelpManual.setText("Help (User manual)");
        jmHelp.add(itemHelpManual);

        jMenuBar.add(jmHelp);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedMain)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedMain, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jcbTimeAttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTimeAttributeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbTimeAttributeActionPerformed
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgTypeOfMatching;
    private javax.swing.JButton btnAddThreshold;
    private javax.swing.JButton btnApplyFilter;
    private javax.swing.JButton btnBackDatasets;
    private javax.swing.JButton btnBackFinalDatasets;
    private javax.swing.JButton btnBackMatching;
    private javax.swing.JButton btnBackPreprocess;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnConfigureFilter;
    private javax.swing.JButton btnCreateFinalDatasets;
    private javax.swing.JButton btnDecreaseHorizon;
    private javax.swing.JButton btnDeleteBuoy;
    private javax.swing.JButton btnDeleteDataset;
    private javax.swing.JButton btnDeletePreprocessedDataset;
    private javax.swing.JButton btnDeleteThreshold;
    private javax.swing.JButton btnIncreaseHorizon;
    private javax.swing.JButton btnLoadMatching;
    private javax.swing.JButton btnMainMenuBuoys;
    private javax.swing.JButton btnMainMenuDatasets;
    private javax.swing.JButton btnMainMenuFinalDatasets;
    private javax.swing.JButton btnMainMenuMatching;
    private javax.swing.JButton btnMainMenuPreprocess;
    private javax.swing.JButton btnModifyBuoy;
    private javax.swing.JButton btnModifyThreshold;
    private javax.swing.JButton btnNewBuoy;
    private javax.swing.JButton btnNewDataset;
    private javax.swing.JButton btnNextDateFinalDataset;
    private javax.swing.JButton btnNextDatePreprocess;
    private javax.swing.JButton btnOpenDataset;
    private javax.swing.JButton btnOpenPreprocessedDataset;
    private javax.swing.JButton btnOutputFile;
    private javax.swing.JButton btnPreviousDateFinalDataset;
    private javax.swing.JButton btnPreviousDatePreprocess;
    private javax.swing.JButton btnRestoreData;
    private javax.swing.JButton btnRunMatching;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveMatching;
    private javax.swing.JButton btnSelectBuoyVariables;
    private javax.swing.JButton btnSelectDataset;
    private javax.swing.JButton btnSelectPreprocessedDataset;
    private javax.swing.JButton btnSelectReanalysisFiles;
    private javax.swing.JButton btnUndo;
    private javax.swing.JButton btnUpdateHorizon;
    private javax.swing.JMenuItem itemBuoys;
    private javax.swing.JMenuItem itemDatasets;
    private javax.swing.JMenuItem itemHelpManual;
    private javax.swing.JMenuItem itemMainMenu;
    private javax.swing.JMenuItem itemMatching;
    private javax.swing.JMenuItem itemPreprocess;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTree jTFilters;
    private javax.swing.JTabbedPane jTabbedMain;
    private javax.swing.JTabbedPane jTabbedPreprocess;
    private javax.swing.JCheckBox jcbFluxOfEnergy;
    private javax.swing.JCheckBox jcbIncludeMissingDates;
    private javax.swing.JCheckBox jcbOpenDatabasesWithWEKA;
    private javax.swing.JCheckBox jcbSynchroniseRData;
    private javax.swing.JCheckBox jcbTimeAttribute;
    private javax.swing.JComboBox<String> jcmbAttributeToPredict;
    private javax.swing.JComboBox<String> jcmbFinalDatasetToVisualise;
    private javax.swing.JComboBox<String> jcmbNumberOutputFiles;
    private javax.swing.JComboBox<String> jcmbOutputFileFormat;
    private javax.swing.JList<String> jlstBuoyVariables;
    private javax.swing.JList<String> jlstMatchingDatasets;
    private javax.swing.JList<String> jlstMatchingPreprocessedDatasets;
    private javax.swing.JList<String> jlstOriginalDatasets;
    private javax.swing.JList<String> jlstPreprocessedDatasets;
    private javax.swing.JList<String> jlstReanalysisFiles;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenu jmMenu;
    private javax.swing.JPanel jpnBuoys;
    private javax.swing.JPanel jpnClassificationOutputConfiguration;
    private javax.swing.JPanel jpnClassificationThresholds;
    private javax.swing.JPanel jpnDatasets;
    private javax.swing.JPanel jpnFileInformation;
    private javax.swing.JPanel jpnFilter;
    private javax.swing.JPanel jpnFinalDatasets;
    private javax.swing.JPanel jpnMatching;
    private javax.swing.JPanel jpnMatchingInputs;
    private javax.swing.JPanel jpnMatchingOptions;
    private javax.swing.JPanel jpnMatchingOriginalDatasets;
    private javax.swing.JPanel jpnMatchingOutput;
    private javax.swing.JPanel jpnMatchingPreprocessedDatasets;
    private javax.swing.JPanel jpnOriginalDatasets;
    private javax.swing.JPanel jpnPredictionHorizon;
    private javax.swing.JPanel jpnPreprocess;
    private javax.swing.JPanel jpnPreprocessedDataset;
    private javax.swing.JPanel jpnPreprocessedDatasets;
    private javax.swing.JPanel jpnSummaryDataset;
    private javax.swing.JPanel jpnViewData;
    private javax.swing.JRadioButton jrbClassification;
    private javax.swing.JRadioButton jrbDirectMatching;
    private javax.swing.JRadioButton jrbRegression;
    private javax.swing.JScrollPane jscrBuoyVariables;
    private javax.swing.JScrollPane jscrBuoys;
    private javax.swing.JScrollPane jscrBuoysDatasets;
    private javax.swing.JScrollPane jscrBuoysMatching;
    private javax.swing.JScrollPane jscrDuplicatedDateColour;
    private javax.swing.JScrollPane jscrFilters;
    private javax.swing.JScrollPane jscrFinalDataset;
    private javax.swing.JScrollPane jscrMatchingDatasetFiles;
    private javax.swing.JScrollPane jscrMatchingPreprocessedDatasets;
    private javax.swing.JScrollPane jscrMissingDateColour;
    private javax.swing.JScrollPane jscrMissingDateColourFD;
    private javax.swing.JScrollPane jscrMissingValueColour;
    private javax.swing.JScrollPane jscrMissingValueColourFD;
    private javax.swing.JScrollPane jscrOriginalDatasets;
    private javax.swing.JScrollPane jscrPreprocessedData;
    private javax.swing.JScrollPane jscrPreprocessedDataset;
    private javax.swing.JScrollPane jscrReanalysisFiles;
    private javax.swing.JScrollPane jscrThresholds;
    private javax.swing.JScrollPane jscrUnexpectedDateColour;
    private javax.swing.JTextArea jtaDuplicatedDateColour;
    private javax.swing.JTextArea jtaMissingDateColour;
    private javax.swing.JTextArea jtaMissingDateColourFD;
    private javax.swing.JTextArea jtaMissingValueColour;
    private javax.swing.JTextArea jtaMissingValueColourFD;
    private javax.swing.JTextArea jtaSummaryDataset;
    private javax.swing.JTextArea jtaSummaryPreprocessed;
    private javax.swing.JTextArea jtaUnexpectedDateColour;
    private javax.swing.JTextField jtfClassThreshold;
    private javax.swing.JTextField jtfDescriptionThreshold;
    private javax.swing.JTextField jtfNumberOfNearestGeopoints;
    private javax.swing.JTextField jtfOpenedDataset;
    private javax.swing.JTextField jtfOutputFolder;
    private javax.swing.JTextField jtfSelectedMatchingDataset;
    private javax.swing.JTextField jtfSelectedOriginalDataset;
    private javax.swing.JTextField jtfSelectedStationIDMatching;
    private javax.swing.JTextField jtfSelectedStationIDPreprocess;
    private javax.swing.JTextField jtfValueThreshold;
    private javax.swing.JLabel lblAttrituteToPredict5;
    private javax.swing.JLabel lblBuoyVariables;
    private javax.swing.JLabel lblClassThreshold;
    private javax.swing.JLabel lblDescriptionThreshold;
    private javax.swing.JLabel lblDuplicatedDate;
    private javax.swing.JLabel lblFinalDatasetVisualise;
    private javax.swing.JLabel lblFinalDatasetsFormat;
    private javax.swing.JLabel lblMissingDate;
    private javax.swing.JLabel lblMissingDateFinalDataset;
    private javax.swing.JLabel lblMissingValue;
    private javax.swing.JLabel lblMissingValueFinalDataset;
    private javax.swing.JLabel lblNumberFinalDatasets;
    private javax.swing.JLabel lblNumberOfNearestGeopoints;
    private javax.swing.JLabel lblOpenedDataset;
    private javax.swing.JLabel lblPredictionHorizon;
    private javax.swing.JLabel lblReanalysisFiles;
    private javax.swing.JLabel lblSelectedBuoy;
    private javax.swing.JLabel lblSelectedDataset4;
    private javax.swing.JLabel lblSelectedOriginalDataset;
    private javax.swing.JLabel lblSelectedStationID4;
    private javax.swing.JLabel lblUnexpectedDate;
    private javax.swing.JLabel lblValueThreshold;
    private javax.swing.JTable tblAttributes;
    private javax.swing.JTable tblBuoys;
    private javax.swing.JTable tblBuoysDatasets;
    private javax.swing.JTable tblBuoysMatching;
    private javax.swing.JTable tblFinalDataset;
    private javax.swing.JTable tblPreprocessedData;
    private javax.swing.JTable tblStatistics;
    private javax.swing.JTable tblThresholds;
    // End of variables declaration//GEN-END:variables
}
