/*
SPAMDA: Software for Pre-processing and Analysis of Meteorological DAta to build datasets

Copyright (c) 2017-2021 by AYRNA Research Group. https://www.uco.es/ayrna/
    Authors: 
      Gómez-Orellana, A.M.; Fernández, J.C.; Dorado-Moreno, M.; Gutiérrez, P.A.; Hervás-Martínez, C.
      Building Suitable Datasets for Soft Computing and Machine Learning Techniques from Meteorological
       Data Integration: A Case Study for Predicting Significant Wave Height and Energy Flux.
      Energies 2021, 14, 468. https://doi.org/10.3390/en14020468                                                                       

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program,
in the file COPYING. If not, see <http://www.gnu.org/licenses/>.

Additional permissions under GNU GPL version 3 section 7:
1. Redistributions of source code, with or without modification, must retain
the above full copyright notice as author attributions.

2. Redistributions in binary form and/or the use of the documentation,
with or without modification, must reproduce the above full copyright notice
as author attributions in the documentation and/or materials provided with
the distribution.

3. Modified versions of source code and/or documentation, as well as binary
distributions, must be marked in reasonable ways as different from the original version.

4. Neither name of copyright holders nor the names of its contributors may be used
to endorse or promote products derived from this software for publicity purposes
without specific prior written permission.

5. Redistribution and/or use of source code, binary format and documentation,
with or without modification, could require indemnification of licensors
and authors by anyone who conveys the material (or modified versions of it)
with contractual assumptions of liability to the recipient, for any liability
that these contractual assumptions directly impose on those licensors and authors.

SPAMDA uses some external libraries. You can see their respective notices about license,
copyright and disclaimer in the following files. For a more complete information about
such licenses, see the distributions provided by their authors:
-Library NetCDF Java, version 4.6.10
	Notice of license in the file NetCDF-LICENSE
-Library SLF4J, version 1.7.25
	Notice of license in the file SLF4J-LICENSE
-Library WEKA, version 3.8.1
	Notice of license in the file WEKA-LICENSE

Contact information:
Antonio Manuel Gomez Orellana, Mr.
email: am[dot]gomez[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).

Juan Carlos Fernandez Caballero, PhD.
email: jfcaballero[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).
 */

package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JOptionPane;
import utils.Utils;
import xml.MatchingInformation;
import xml.XMLFile;
import view.interfaces.InterfaceViewNewMatchingFile;



/**
 * This class defines the controller for managing the events generated by the view NewMatchingFile.
 * 
 */
public class ControllerViewNewMatchingFile implements ActionListener {
    
    /**
     * View.
     */
    private final InterfaceViewNewMatchingFile view;
    

    /**
     * Matching configuration of matching file.
     */
    private MatchingInformation matchingInfo;

    
    /* Methods of the class */
    
    
    /**
     * Constructor.
     * @param view View that this controller will manage.
     * @param matchingInfo Matching information of the matching file to create.
     */
    public ControllerViewNewMatchingFile(InterfaceViewNewMatchingFile view, MatchingInformation matchingInfo){

        /* Sets View */
        this.view = view;
        
        /* Initialize to default values. */
        this.matchingInfo = matchingInfo;
        
    }

    
    /**
     * Returns view.
     * @return View.
     */
    private InterfaceViewNewMatchingFile getView(){
        
        /* Returns view */
        return view;
        
    }
            
    

    /**
     * Returns matching configuration of matching file.
     * @return Matching configuration of matching file.
     */
    public MatchingInformation getMatchingInfo(){
        
        /* Matching configuration of matching file to create. */

        return this.matchingInfo;
        
    }
            

    
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void actionPerformed(ActionEvent event){

        /* Manages the event generated in the view. */
        
        /* Gets the event name.*/
        String eventName = event.getActionCommand();
        
        switch (eventName) {                

            case InterfaceViewNewMatchingFile.SAVE_MATCHING:
                
                /* Action SAVE_MATCHING clicked. */
                doSaveMatching();
                break;
                
            case InterfaceViewNewMatchingFile.CANCEL:
                
                /* Action EXIT clicked. */
                doCancel();
                break;

            case InterfaceViewNewMatchingFile.HELP:
                
                /* Action HELP clicked. */
                doHelp();
                break;
                
            default:
                
                /* Event not defined. */
                
                JOptionPane.showMessageDialog(null, "Event not defined:" + eventName + ".", "Error", JOptionPane.ERROR_MESSAGE);
                break;
        }

    }



    /* Methods for processing each event (what user clicked on view). */    
       
    

    /**
     * Saves matching file.
     */    
    private void doSaveMatching(){
       
        /* Saves matching file. */
        
        /* Utilities. */
        Utils util = new Utils();
        
        /* File name. */
        String typedFilename = getView().getMatchingFileName();
        
        /* Sets short description of matching file type by user. */
        getMatchingInfo().setShortDescription(getView().getShortDescription());
        
        /* Checks file name. */        
        if (util.isValidFilename(typedFilename) == true){
                        
            /* File name is valid. */
                      
            /* To check if user wants to overwrite the matching file in cases it exists. */
            boolean createMatchingFile=true;

            
            /* Path to create the matching file. */
            String path = System.getProperty("user.dir", ".")+File.separator+"DB"
            +File.separator+"id"+Integer.toString(getMatchingInfo().getIDBuoy())+File.separator+"Matching"+File.separator;
            
            /* XML of matching file to be created. */
            File xmlMatchingFile = new File(path+typedFilename+".xml");
                                    
            
            /* Checks if matching file name exists.*/
            if (xmlMatchingFile.exists() == true){
                
                /* Asks the user that really wants to overwrite the matching file. */
                
                Object[] options = {"Cancel", "Overwrite"};
                
                if (JOptionPane.showOptionDialog(null, "Attention !!\n\nThe matching configuration "+xmlMatchingFile.getName()+" already exists.\n"
                    +"¿Do you to want to overwrite it?\n\n","Warning",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null,options, options[0])==1){

                    /* User clicked on Overwrite. */
                    
                    if (xmlMatchingFile.delete()==false){
                     
                        /* Matching file could not be deleted. */
                        
                        JOptionPane.showMessageDialog(null, "The matching configuration " + xmlMatchingFile.getName()+ " could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);
                        
                        createMatchingFile=false;
                        
                    }
                }else{
                    
                    /* User clicked on Cancel. */
                    createMatchingFile=false;
                }
            }

            
            /* Checks if matching file can be created. */
            
            if(createMatchingFile==true){
                
                /* Creates matching file. */
                                
                /* Creates XML file of the matching file. */
                XMLFile<MatchingInformation> xmlFile = new XMLFile<>(MatchingInformation.class, xmlMatchingFile);

                if (xmlFile.writeXMLFile(getMatchingInfo()) == false){

                    /* The .XML file could not be created. */
                    
                    JOptionPane.showMessageDialog(null, "There was an error while creating the "+typedFilename+".xml file.", "Error", JOptionPane.ERROR_MESSAGE);

                }else{                    
                
                    JOptionPane.showMessageDialog(null, "The matching configuration "+typedFilename+".xml" +" was successfully created.", "Message", JOptionPane.INFORMATION_MESSAGE);
                    
                }
                                                            
                /* The process has finished. */                    

                /* Closes view. */
                doCancel();

            }else{
            
                /* Cancelled by user. */
                JOptionPane.showMessageDialog(null, "Operation cancelled.", "Message", JOptionPane.INFORMATION_MESSAGE);               
            
            }     
        }else{
            
            /* Error. File name is not valid. */
            
            JOptionPane.showMessageDialog(null, "File name not valid. Please, check it has valid characters and no extension.", "Message", JOptionPane.INFORMATION_MESSAGE);
                
        }

    }
                
    
    
    /**
     * Closes the view.
     */
    private void doCancel(){
        
        /* Closes the view. */
        getView().closeView();
    
    }

    
    /**
     * Shows help.
     */
    private void doHelp(){

        /* Opens pdf file that contains the user manual. */
        
        /* Utilities. */
        Utils util = new Utils();
        
        /* Opens user manual. */
        util.openHelpFile();
        
    }

}
