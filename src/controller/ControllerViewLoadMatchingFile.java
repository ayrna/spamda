/*
SPAMDA: Software for Pre-processing and Analysis of Meteorological DAta to build datasets

Copyright (c) 2017-2018 by AYRNA Research Group. https://www.uco.es/ayrna/
	Authors: 
		Antonio Manuel Gomez Orellana, Juan Carlos Fernandez Caballero,
		Manuel Dorado Moreno, Pedro Antonio Gutierrez Pe√±a and 
		Cesar Hervas Martinez.

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program,
in the file COPYING. If not, see <http://www.gnu.org/licenses/>.

Additional permissions under GNU GPL version 3 section 7:
1. Redistributions of source code, with or without modification, must retain
the above full copyright notice as author attributions.

2. Redistributions in binary form and/or the use of the documentation,
with or without modification, must reproduce the above full copyright notice
as author attributions in the documentation and/or materials provided with
the distribution.

3. Modified versions of source code and/or documentation, as well as binary
distributions, must be marked in reasonable ways as different from the original version.

4. Neither name of copyright holders nor the names of its contributors may be used
to endorse or promote products derived from this software for publicity purposes
without specific prior written permission.

5. Redistribution and/or use of source code, binary format and documentation,
with or without modification, could require indemnification of licensors
and authors by anyone who conveys the material (or modified versions of it)
with contractual assumptions of liability to the recipient, for any liability
that these contractual assumptions directly impose on those licensors and authors.

SPAMDA uses some external libraries. You can see their respective notices about license,
copyright and disclaimer in the following files. For a more complete information about
such licenses, see the distributions provided by their authors:
-Library NetCDF Java, version 4.6.10
	Notice of license in the file NetCDF-LICENSE
-Library SLF4J, version 1.7.25
	Notice of license in the file SLF4J-LICENSE
-Library WEKA, version 3.8.1
	Notice of license in the file WEKA-LICENSE

Contact information:
Juan Carlos Fernandez Caballero, PhD.
email: jfcaballero[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).
 */

package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import utils.Utils;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import xml.MatchingInformation;
import xml.XMLFile;
import view.interfaces.InterfaceViewLoadMatchingFile;


/**
 * This class defines the controller for managing the events generated by the view LoadMatchingFile.
 * 
 */
public class ControllerViewLoadMatchingFile implements ActionListener, ListSelectionListener, MouseListener {
    
    /**
     * View.
     */
    private final InterfaceViewLoadMatchingFile view;
    
    
    /**
     * Matching file's names that belong to the selected buoy.
     */    
    private DefaultListModel<String> modelMatchingFiles;
    
    
    /**
     * Path of each matching file that belongs to the selected buoy.
     */
    private ArrayList<String> pathMatchingFiles;
            
    
    /**
     * Path of selected matching file.
     */    
    private String pathMatchingFile;
    
    
    /**
     * File's name of selected matching file.
     */        
    private String matchingFilename;
           
    
    /**
     * To check if user selected a matching file or clicked on Cancel.
     */
    private boolean userSelectedAFile;
    
    
    /**
     * Matching configuration of selected matching file.
     */
    private MatchingInformation matchingConfiguration;

    
    
    /* Methods of the class */
    
    
    /**
     * Constructor.
     * @param view View that this controller will manage.
     * @param datamodel Buoys's information.
     */
    public ControllerViewLoadMatchingFile(InterfaceViewLoadMatchingFile view, DefaultTableModel datamodel){

        /* Sets View */
        this.view = view;
        
        /* Initializes to default values. */
        this.pathMatchingFiles=new ArrayList<>();
        this.modelMatchingFiles=new DefaultListModel<>();
                
        this.pathMatchingFile="";
        this.matchingFilename="";
        
        this.userSelectedAFile=false;        
        
        this.matchingConfiguration = new MatchingInformation();
        
        /* Shows Id and name of each buoy. */
        this.view.setModelBuoys(datamodel);
        
    }

    
    /**
     * Returns view.
     * @return View.
     */
    private InterfaceViewLoadMatchingFile getView(){
        
        /* Returns view */
        return this.view;
        
    }

    
    /**
     * Returns path of each matching file that belongs to the selected buoy.
     * @return Path of each matching file that belongs to the selected buoy.
     */
    public ArrayList<String> getPathMatchingFiles(){
    
        /* Gets path of each matching file that belongs to the selected buoy. */
        
        return this.pathMatchingFiles;

    }

    
    /**
     * Returns matching files's names that belong to the selected buoy.
     * @return Matching files's names that belong to the selected buoy.
     */
    public DefaultListModel<String> getModelMatchingFiles(){
    
        /* Gets the model of the list that shows the matching filenames that belong to the selected buoy. */
        
        return this.modelMatchingFiles;

    }
        
    
    /**
     * Sets the path of the matching file selected by user.
     * @param pathMatchingFile Path of the matching file selected by user.
     */
    private void setPathMatchingFile(String pathMatchingFile){
    
        /* Sets the path of the matching file selected by user. */
        
        this.pathMatchingFile = pathMatchingFile;
        
    }
    
    
    /**
     * Returns the path of the matching file selected by user.
     * @return The path of the matching file selected by user.
     */
    public String getPathMatchingFile(){
    
        /* Gets the path of the matching file selected by user. */
        
        return this.pathMatchingFile;
        
    }
    
    
    /**
     * Sets the matching file's name selected by user.
     * @param matchingFilename Matching file's name selected by user.
     */
    private void setMatchingFilename(String matchingFilename){
    
        /* Sets the matching file name selected by user. */
        
        this.matchingFilename = matchingFilename;
        
    }
    
       
    /**
     * Returns the matching file's name selected by user.
     * @return The matching file's name selected by user.
     */
    public String getMatchingFilename(){
    
        /* Gets the matching file name selected by user. */
        
        return this.matchingFilename;
        
    }
    
    
    /**
     * Sets the configuration of the selected matching file.
     * @param matchingConfiguration Configuration of the selected matching file.
     */
    private void setMatchingConfiguration(MatchingInformation matchingConfiguration){
    
        /* Sets the configuration of the selected matching file. */
        
        this.matchingConfiguration = matchingConfiguration;
        
    }    


    /**
     * Returns the configuration of the selected matching file.
     * @return The configuration of the selected matching file.
     */
    public MatchingInformation getMatchingConfiguration(){
    
        /* Gets the configuration of the selected matching file. */
        
        return this.matchingConfiguration;
        
    }
        
    
    /**
     * Sets true that user selected a matching file.
     */
    private void setUserSelectedAFile(){
    
        /* Sets true that user selected a matching file. */
        
        this.userSelectedAFile = true;
        
    }    


    /**
     * Returns True if user selected a matching file or False if not.
     * @return True if user selected a matching file or False if not.
     */
    public boolean getUserSelectedAFile(){
    
        /* Gets true if user selected a matching file or False if not. */
        
        return this.userSelectedAFile;
        
    }

    
    /**
     * Returns selected id Buoy by user to load the matching file.
     * @return Selected id Buoy by user to load the matching file.
     */
    public int getSelectedIdBuoy(){
    
        /* Gets the selected id Buoy by user to load the matching file. */
        
        /* Selected row. */
        int selectedRow = getView().getSelectedRowBuoy();
        
        /* Selected id Buoy. */
        int idBuoy = (int) getView().getModelBuoys().getValueAt(selectedRow, 0);
        
        return idBuoy;
        
    }
    
    

    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void valueChanged(ListSelectionEvent event){
        
        /* To know if event was generated in jlstMatchingFiles */
        String objectClass = event.getSource().getClass().getSimpleName();
        
        if (event.getValueIsAdjusting() == false){        
        
            switch (objectClass) {

                case "DefaultListSelectionModel":

                    /*  tblBuoys */
                        
                    /* A new buoy was selected in tblBuoys. */                        
                
                    /* Shows matching files that belong to the selected buoy. */
                    buoySelectionChanged();
                                                               
                    break;
                    
                case "JList":
                            
                    if(event.getSource().toString().contains("jlstMatchingFiles")){
                                               
                        /* jlstMatchingFiles */
                    
                        /* A new Matching file was selected by user. */
                    
                        /* Shows summary of the selected Matching file. */
                        matchingSelectionChanged();
                    }

                    break;

            }
        }        
        
    }
    
    
    
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void actionPerformed(ActionEvent event){

        /* Manages the event generated by the view. */
        
        /* Gets the event name.*/
        String eventName = event.getActionCommand();
        
        switch (eventName) {                
                           
            case InterfaceViewLoadMatchingFile.OPEN_MATCHING:
                
                /* Action OPEN_MATCHING. */
                doOpenFile("Open matching");

                break;
                
            case InterfaceViewLoadMatchingFile.DELETE_MATCHING:
                
                /* Action DELETE_MATCHING. */
                doDeleteFile();

                break;
                
            case InterfaceViewLoadMatchingFile.BACK:
                
                /* Action BACK clicked. */
                doBack();
                break;
                
            case InterfaceViewLoadMatchingFile.HELP:
                
                /* Action HELP clicked. */
                doHelp();
                break;
                
            default:
                
                /* Event not defined. */
                
                JOptionPane.showMessageDialog(null, "Event not defined:" + eventName + ".", "Error", JOptionPane.ERROR_MESSAGE);
                break;
        }

    }


    
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void mouseClicked(MouseEvent event) {

        /* Component that generated the event. */
        String component = event.getComponent().getName();

        if(event.getClickCount() == 2){
            
            /* Double click. */
            
            switch (component) {

                case "jlstMatchingFiles":
                
                    /* Double click on matching files list. */
                    
                    doOpenFile("Double click Matching");
                    break;

            }
        }
    }

    

    @Override
    public void mousePressed(MouseEvent e) {
       
    }
    

    @Override
    public void mouseReleased(MouseEvent e) {
       
    }

    
    @Override
    public void mouseEntered(MouseEvent e) {
       
    }


    @Override
    public void mouseExited(MouseEvent e) {
       
    }
    
    
    
    /* Methods for processing each event (what user clicked on view). */    

    
    /**
     * Updates matching filenames when user selects a new buoy.
     */
    private void buoySelectionChanged(){
        
        /* The user changed buoy selection. */
        
        /* Row selected in tablemodel. */        
        int selectedRow = getView().getSelectedRowBuoy();
        
        if(selectedRow!=-1){
            
            /* Id of the buoy selected. */
            int idBuoy = (int) getView().getModelBuoys().getValueAt(selectedRow, 0);

            /* Utilities. */
            Utils util = new Utils();

            /* A new buoy was selected. */
            getModelMatchingFiles().clear();
            getPathMatchingFiles().clear();

            /* Search for the .xml matching files that belong to the buoy. */
            util.searchFiles(idBuoy, getModelMatchingFiles(), new ArrayList<>(Arrays.asList("Matching")), getPathMatchingFiles(), new ArrayList<>(Arrays.asList("XML Files", "XML", "xml")));
            
            /* Updates in view the matching files that belong to the buoy. */
            getView().setModelMatching(getModelMatchingFiles());
        
        }
    }
    
    
    
    /**
     * Updates summary of selected matching file when user selects a new one.
     */    
    private void matchingSelectionChanged(){
    
        /* Shows summary of the selected matching file. */
        
        /* Gets the view. */
        InterfaceViewLoadMatchingFile theView = getView();

        /* Selected file. */
        int selectedIndex = theView.getSelectedIndexMatching();
        
        
        if(selectedIndex!=-1){
            
            /* Path of the selected matching file. */
            String filename = getPathMatchingFiles().get(selectedIndex);
            
            /* Reads the xml file. */
            File xml = new File(filename);
            
            XMLFile<MatchingInformation> xmlFile = new XMLFile<>(MatchingInformation.class, xml);
            
            /* Sets the configuration. */
            setMatchingConfiguration(xmlFile.readXMLFile());
            
            /* Clear previous data. */
            getView().clearMatchingSummary();
            
            /* Shows summary of the selected matching file. */
            
            theView.addLineMatchingSummary("File name dataset used: " + getMatchingConfiguration().getDatasetFileName());
            theView.addLineMatchingSummary("\n\nDate of creation: " + getMatchingConfiguration().getDateCreation().getTime());
            theView.addLineMatchingSummary("\n\nAttribute predicted: " + getMatchingConfiguration().getAttributeNameToPredict());
            
            theView.addLineMatchingSummary("\nIncluded variables of the buoy as inputs: ");
            
                /**/
                if(getMatchingConfiguration().getBuoyVariables().isEmpty() == true){
                    
                    /* None variable of the buoy was selected. */
                    theView.addLineMatchingSummary(" None.");
                
                }else{
                    
                    /* At least one variable of the buoy as selected. */
                    
                    /* Writes each selected variable of the buoy. */
                    for(String variable : getMatchingConfiguration().getBuoyVariables()){

                        /* Writes file name.*/
                        theView.addLineMatchingSummary("\n   -> " + variable);

                    }
                
                }
                        
            theView.addLineMatchingSummary("\nIncluded missing dates: " + getMatchingConfiguration().getIncludeMissingDates());
            theView.addLineMatchingSummary("\nType of matching: " + getMatchingConfiguration().getTypeOfMatching());
            theView.addLineMatchingSummary("\n\nDescription:\n" + getMatchingConfiguration().getShortDescription());            

        }        
                
    }
    

    
    /**
     * Opens the selected matching file and returns.
     * 
     * @param event Indicates how the user selected the matching file.
     */
    private void doOpenFile(String event){
        
        /* 
            This method is called when user:
        
             - click on Open matching button
             - double click on matching files

        */
        
        /* Selected index matching file. */        
        int selectedIndex;
        
        /* Path of the matching file. */
        String selectedPathMatchingFile="";
        
        /* Matching file name. */
        String selectedMatchingFilename="";

        
        switch (event) {

            case "Open matching":

                /* Click on Open matching button. */
                                    
                /* Checks if a matching file is selected. */

                selectedIndex = getView().getSelectedIndexMatching();

                if(selectedIndex!=-1){

                    /* User selected a matching file. */

                    selectedPathMatchingFile = getPathMatchingFiles().get(selectedIndex);

                    selectedMatchingFilename = getModelMatchingFiles().get(selectedIndex);                    

                }else{

                    /* None matching file is selected. */

                    JOptionPane.showMessageDialog(null, "Please, select a matching configuration to open.", "Message", JOptionPane.INFORMATION_MESSAGE);

                }                    
                
                break;

            case "Double click Matching":

                /* Double click in matching files list. */

                /* User selected a matching file. */
                
                selectedIndex = getView().getSelectedIndexMatching();                                                

                if(selectedIndex!=-1){

                    /* User selected a matching file. */

                    selectedPathMatchingFile = getPathMatchingFiles().get(selectedIndex);
                    
                    selectedMatchingFilename = getModelMatchingFiles().get(selectedIndex);                                    

                }else{

                    /* None matching file is selected. */

                    JOptionPane.showMessageDialog(null, "Please, select a matching configuration to open.", "Message", JOptionPane.INFORMATION_MESSAGE);

                }                    

                break;                    
                                
        }

        if( ! selectedMatchingFilename.equals("")){
            
            /* User selected a matching. */
            
            /*
                Sets selection made by user and ControllerViewManageBuoys will get it.
            */
            
            setPathMatchingFile(selectedPathMatchingFile);            
            setMatchingFilename(selectedMatchingFilename);
            
            /* Sets true that user selected a matching file. */
            setUserSelectedAFile();

            /* Closes the view. */
            doBack();
        }

    }
    
    
    
    /**
     * Deletes selected matching file.
     */    
    private void doDeleteFile(){
        
        /* Deletes the selected matching file by user. */
        
        /* File to be deleted. */
        int selectedIndex = getView().getSelectedIndexMatching();
        
        if(selectedIndex == -1){
            
            JOptionPane.showMessageDialog(null, "Please, select a matching configuration to delete.", "Message", JOptionPane.INFORMATION_MESSAGE);
        
        }else{
            
            Object[] options = {"Cancel", "Delete"};

            /* Ask the user that really want to delete the selected file. */

            /* Gets the file to delete. */
            File file = new File(getPathMatchingFiles().get(selectedIndex));

            if (JOptionPane.showOptionDialog(null, "Attention !!\n\nThe information of the matching configuration "+file.getName()+" will be erased."
                    +"\n\nClick on Cancel to abort or Delete to delete it.\n\n","Warning",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null,options, options[0])==1){

                    /* Deletes selected matching file. */

                    if (file.delete()){

                        /* success. */

                        JOptionPane.showMessageDialog(null, "The matching configuration "+file.getName()+" has been deleted.", "Message", JOptionPane.INFORMATION_MESSAGE);

                        /* Updates listModelDatasetFiles. */  
                        getModelMatchingFiles().remove(selectedIndex);

                        /* Removes deleted file. */
                        getPathMatchingFiles().remove(selectedIndex);

                        /* Clear previous data of the dataset description. */
                        getView().clearMatchingSummary();

                    }else{

                        JOptionPane.showMessageDialog(null, "The matching configuration "+ file.getName() +" could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);

                    }

            }
        }
        
    }
    

    /**
     * Closes the view.
     */    
    private void doBack(){
        
        /* Closes the view. */
        getView().closeView();
    
    }

    
    /**
     * Shows help.
     */    
    private void doHelp(){

        /* Opens pdf file that contains the user manual. */
        
        /* Utilities. */
        Utils util = new Utils();
        
        /* Opens user manual. */
        util.openHelpFile();
            
    }    
}
