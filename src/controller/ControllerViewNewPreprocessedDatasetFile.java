/*
SPAMDA: Software for Pre-processing and Analysis of Meteorological DAta to build datasets

Copyright (c) 2017-2021 by AYRNA Research Group. https://www.uco.es/ayrna/
    Authors: 
      Gómez-Orellana, A.M.; Fernández, J.C.; Dorado-Moreno, M.; Gutiérrez, P.A.; Hervás-Martínez, C.
      Building Suitable Datasets for Soft Computing and Machine Learning Techniques from Meteorological
       Data Integration: A Case Study for Predicting Significant Wave Height and Energy Flux.
      Energies 2021, 14, 468. https://doi.org/10.3390/en14020468                                                                       

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program,
in the file COPYING. If not, see <http://www.gnu.org/licenses/>.

Additional permissions under GNU GPL version 3 section 7:
1. Redistributions of source code, with or without modification, must retain
the above full copyright notice as author attributions.

2. Redistributions in binary form and/or the use of the documentation,
with or without modification, must reproduce the above full copyright notice
as author attributions in the documentation and/or materials provided with
the distribution.

3. Modified versions of source code and/or documentation, as well as binary
distributions, must be marked in reasonable ways as different from the original version.

4. Neither name of copyright holders nor the names of its contributors may be used
to endorse or promote products derived from this software for publicity purposes
without specific prior written permission.

5. Redistribution and/or use of source code, binary format and documentation,
with or without modification, could require indemnification of licensors
and authors by anyone who conveys the material (or modified versions of it)
with contractual assumptions of liability to the recipient, for any liability
that these contractual assumptions directly impose on those licensors and authors.

SPAMDA uses some external libraries. You can see their respective notices about license,
copyright and disclaimer in the following files. For a more complete information about
such licenses, see the distributions provided by their authors:
-Library NetCDF Java, version 4.6.10
	Notice of license in the file NetCDF-LICENSE
-Library SLF4J, version 1.7.25
	Notice of license in the file SLF4J-LICENSE
-Library WEKA, version 3.8.1
	Notice of license in the file WEKA-LICENSE

Contact information:
Antonio Manuel Gomez Orellana, Mr.
email: am[dot]gomez[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).

Juan Carlos Fernandez Caballero, PhD.
email: jfcaballero[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).
 */

package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JOptionPane;
import view.interfaces.InterfaceViewNewPreprocessedDatasetFile;
import java.util.GregorianCalendar;
import model.PreprocessDatasetFile;
import utils.Utils;
import xml.DatasetInformation;
import xml.XMLFile;


/**
 * This class defines the controller for managing the events generated by the view NewPreprocessedDatasetFile.
 * 
 */
public class ControllerViewNewPreprocessedDatasetFile implements ActionListener {
    
    /**
     * View.
     */
    private final InterfaceViewNewPreprocessedDatasetFile view;
    
    
    /**
     * ID of selected buoy.
     */
    private final int idBuoy;
    
    
    /**
     * File's name of selected dataset to create the new processed dataset file.
     */                
    private final String datasetFilename;
    

    /**
     * Information of the preprocessed dataset file to create.
     */    
    private DatasetInformation preprocessedDatasetInfo;

    
    /**
     * Preprocessed dataset file's to write.
     */        
    private PreprocessDatasetFile preprocessedDataset;
       
    
    /**
     * To check if user saved the preprocessed dataset file or clicked on Cancel.
     */            
    private boolean userSavedPreprocessedDataset;

    
    /**
     * Preprocessed dataset file's name saved.
     */                
    private String preprocessedDatasetFilename;
    
    
    /* Methods of the class */
    
    
    /**
     * Constructor.
     * @param view View that this controller will manage.
     * @param idBuoy ID of selected buoy.
     * @param datasetFileName File name of selected dataset to create the new processed dataset file.
     * @param preprocessedDatasetInfo Information of the preprocessed dataset file to create. 
     * @param preprocessedDataset Preprocessed dataset file to write.
     */
    public ControllerViewNewPreprocessedDatasetFile(InterfaceViewNewPreprocessedDatasetFile view, int idBuoy, String datasetFileName, DatasetInformation preprocessedDatasetInfo, PreprocessDatasetFile preprocessedDataset){

        /* Sets View */
        this.view = view;
        
        /* Initialize to default values. */
        this.idBuoy = idBuoy;
        this.datasetFilename = datasetFileName;
        this.preprocessedDatasetInfo = preprocessedDatasetInfo;
        this.preprocessedDataset = preprocessedDataset;
        this.userSavedPreprocessedDataset=false;
        this.preprocessedDatasetFilename="";
        
    }

    
    /**
     * Return view.
     * @return View.
     */
    private InterfaceViewNewPreprocessedDatasetFile getView(){
        
        /* Returns view */
        return view;
        
    }
    
        
    /**
     * Returns ID of selected buoy.
     * @return ID of selected buoy.
     */
    private int getIdBuoy(){
        
        /* Returns ID Buoy. */

        return this.idBuoy;
        
    }

    
    /**
     * Returns file's name of selected dataset to create the new processed dataset file.
     * @return File's name of selected dataset to create the new processed dataset file.
     */
    private String getDatasetFilename(){
        
        /* Dataset file name. */

        return this.datasetFilename;
        
    }


    /**
     * Returns information of the preprocessed dataset file to create.
     * @return Information of the preprocessed dataset file to create.
     */
    private DatasetInformation getPreprocessedDatasetInfo(){
        
        /* Summay of preprocessed dataset file to create. */

        return this.preprocessedDatasetInfo;
        
    }
    
    
    /**
     * Returns preprocessed dataset file's data to write.
     * @return Preprocessed dataset file's data to write.
     */
    private PreprocessDatasetFile getPreprocessedDataset(){
        
        /* Summay of preprocessed dataset file to create. */

        return this.preprocessedDataset;
        
    }    
    
    
    /**
     * Returns true if user saved the preprocessed dataset file or False if not.
     * @return True if user saved the preprocessed dataset file or False if not.
     */
    public boolean getUserSavedPreprocessedDataset(){
        
        /* True/False if user saved the preprocessed dataset file or not. */

        return this.userSavedPreprocessedDataset;
        
    }    
    

    /**
     * Sets True if user saved the preprocessed dataset file or False if not.
     * @param userSavedPreprocessedDataset True if user saved the preprocessed dataset file or False if not.
     */
    private void setUserSavedPreprocessedDataset(boolean userSavedPreprocessedDataset){
        
        /* Sets True/False if user saved the preprocessed dataset file or not. */

        this.userSavedPreprocessedDataset=userSavedPreprocessedDataset;
        
    }    
    
    
    /**
     * Sets the preprocessed dataset file name saved by user.
     * @param  preprocessedDatasetFilename File name of preprocessed dataset saved by user.
     */
    private void setPreprocessedDatasetFilename(String preprocessedDatasetFilename){
    
        /* Sets the preprocessed dataset file name saved by user. */
        
        this.preprocessedDatasetFilename = preprocessedDatasetFilename;
        
    }
    
       
    /**
     * Returns the preprocessed dataset file's name saved by user.
     * @return The preprocessed dataset file's name saved by user.
     */
    public String getPreprocessedDatasetFilename(){
    
        /* Gets the preprocessed dataset file name saved by user. */
        
        return this.preprocessedDatasetFilename;
        
    }
    

    
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void actionPerformed(ActionEvent event){

        /* Manages the event generated in the view. */
        
        /* Gets the event name.*/
        String eventName = event.getActionCommand();
        
        switch (eventName) {                


            case InterfaceViewNewPreprocessedDatasetFile.SAVE_DATASET:
                
                /* Action SAVE_DATASET clicked. */
                doSavePreprocessedDataset();
                break;
                
            case InterfaceViewNewPreprocessedDatasetFile.CANCEL:
                
                /* Action EXIT clicked. */
                doCancel();
                break;

            case InterfaceViewNewPreprocessedDatasetFile.HELP:
                
                /* Action HELP clicked. */
                doHelp();
                break;
                
            default:
                
                /* Event not defined. */
                
                JOptionPane.showMessageDialog(null, "Event not defined:" + eventName + ".", "Error", JOptionPane.ERROR_MESSAGE);
                break;
        }

    }
    

    
    /* Methods for processing each event (what user clicked on view). */    

    
    /**
     * Creates preprocessed dataset file.
     */    
    private void doSavePreprocessedDataset(){
       
        /* Saves the preprocessed dataset. */
        
        /* Utilities. */
        Utils util = new Utils();
        
        /* File name. */
        String typedFilename = getView().getPreprocessedDatasetFileName();
        
        /* Checks file name. */        
        if (util.isValidFilename(typedFilename) == true){
            
            /* To check is process failed or not. */
            boolean processFailed = false;
            
            /* File name is valid. */
                      
            /* To check if user wants to overwrite the preprocessed dataset file in cases it exists. */
            boolean createPreprocessedDataset=true;
            
            /* 
               File name dataset that belongs the preprocessed file to create.
                --> Folder where creates the preprocessed dataset file.
            */
            String filenameDataset = getDatasetFilename();
            filenameDataset = filenameDataset.substring(0, filenameDataset.length() - 3);
                        
            /* Path to create the preprocessed dataset file. */
            String path = System.getProperty("user.dir", ".")+File.separator+"DB"
            +File.separator+"id"+Integer.toString(getIdBuoy())+File.separator+"Preprocess"+File.separator+filenameDataset+File.separator;
            
            /* Preprocessed dataset and XML file to be created. */
            File preprocessedDatasetFile = new File(path+typedFilename+".db");
            File xmlpreprocessedDatasetFile = new File(path+typedFilename+".xml");
                                    
            
            /* Checks if dataset file name exists.*/
            if (preprocessedDatasetFile.exists() == true){
                
                /* Asks the user that really wants to overwrite the preprocessed dataset file. */
                
                Object[] options = {"Cancel", "Overwrite"};
                
                if (JOptionPane.showOptionDialog(null, "Attention !!\n\nThe pre-processed dataset "+preprocessedDatasetFile.getName()+" already exists.\n"
                    +"¿Do you to want to overwrite it?\n\n","Warning",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null,options, options[0])==1){

                    /* User clicked on Overwrite. */
                    
                    if (preprocessedDatasetFile.delete()==false){
                     
                        /* Dataset could not be deleted. */
                        
                        JOptionPane.showMessageDialog(null, "The pre-processed dataset " + preprocessedDatasetFile.getName()+ " could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);
                        
                        createPreprocessedDataset=false;
                        
                    }
                }else{
                    
                    /* User clicked on Cancel. */
                    createPreprocessedDataset=false;
                }
            }

            
            /* Checks if preprocessed dataset file can be created. */
            
            if(createPreprocessedDataset==true){
                
                /* Creates preprocessed dataset file. */
                
                /* Data of the preprocessed dataset file to create. */
                PreprocessDatasetFile outputFile = getPreprocessedDataset();
                              
                if (outputFile.writePreprocessedDatasetFile(preprocessedDatasetFile) == true){
                    
                    /* File properly writed on disk. */
                    
                    /* To gets first and last date saved on preprocessed dataset file. */
                    weka.core.Instance instance;
                    
                    /* Summary information of the preprocessed dataset file to create. */
                    DatasetInformation datasetInformationToWrite = getPreprocessedDatasetInfo();
                                                          
                    /* Sets file name dataset. */
                    datasetInformationToWrite.setFileNameDataset(typedFilename+".db");
                    
                    /* Sets header of the preprocessed dataset file. */
                    datasetInformationToWrite.setHeaderDatasetFile(outputFile.getHeaderPreprocessedDatasetFile());
                    
                    /* Sets date of creation. */
                    datasetInformationToWrite.setDateCreation(GregorianCalendar.getInstance());
                
                    /* Sets first date of dataset file. */
                    instance = outputFile.getInstancesWEKA().getInstances().get(0);
                    
                    datasetInformationToWrite.setFirstDate(util.unixSecondsToString( (long) instance.value(0)));
                    

                    /* Sets last date of dataset file. */
                    instance = outputFile.getInstancesWEKA().getInstances().get(outputFile.getInstancesWEKA().getNumberOfInstances() - 1);                    
                    
                    datasetInformationToWrite.setLastDate(util.unixSecondsToString( (long) instance.value(0)));

                    /* Creates XML file of the preprocessed dataset created. */
                    XMLFile<DatasetInformation> xmlFile = new XMLFile<>(DatasetInformation.class, xmlpreprocessedDatasetFile);

                    if (xmlFile.writeXMLFile(datasetInformationToWrite) == false){

                        /* The .XML file could not be created. */
                    
                        JOptionPane.showMessageDialog(null, "There was an error while creating the "+typedFilename+".db pre-processed dataset.", "Error", JOptionPane.ERROR_MESSAGE);
                        
                        processFailed=true;

                    }else{                    
                
                        JOptionPane.showMessageDialog(null, "The pre-processed dataset "+typedFilename+".db" +" was successfully created.", "Message", JOptionPane.INFORMATION_MESSAGE);
                    
                        /* In tab: Datasets will appear the preprocessed dataset file created. */
                        setUserSavedPreprocessedDataset(true);

                    }
                    
                    
                    /*
                        Sets the preprocessed dataset file name just created
                        and ControllerViewManageBuoys will get it.
                    */
                    setPreprocessedDatasetFilename(typedFilename+".db");
                    
                    /* The process has finished. */                    

                    /* Closes view. */
                    doCancel();
                    
                }else{
                    
                    JOptionPane.showMessageDialog(null, "There was an error while creating the "+typedFilename+".db pre-processed dataset.", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    processFailed=true;
                    
                }
                
                if(processFailed==true){
                
                    /* Process failed. */
                    
                    /* Deletes files created.  */
                    
                    if(preprocessedDatasetFile.exists()){
                        
                        preprocessedDatasetFile.delete();
                                
                    }
                    
                    if(xmlpreprocessedDatasetFile.exists()){
                        
                        xmlpreprocessedDatasetFile.delete();
                                
                    }                                        
                    
                }

            }else{
            
                /* Cancelled by user. */
                JOptionPane.showMessageDialog(null, "Operation cancelled.", "Message", JOptionPane.INFORMATION_MESSAGE);               
            
            }     
        }else{
            
            /* Error. File name is not valid. */
            
            JOptionPane.showMessageDialog(null, "File name not valid. Please, checks it has valid characters and no extension.", "Message", JOptionPane.INFORMATION_MESSAGE);
                
        }

    }
                

    /**
     * Closes the view.
     */
    private void doCancel(){
        
        /* Closes the view. */
        getView().closeView();
    
    }

    
    /**
     * Shows help.
     */
    private void doHelp(){

        /* Opens pdf file that contains the user manual. */
        
        /* Utilities. */
        Utils util = new Utils();
        
        /* Opens user manual. */
        util.openHelpFile();
        
    }

}
