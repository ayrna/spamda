/*
SPAMDA: Software for Pre-processing and Analysis of Meteorological DAta to build datasets

Copyright (c) 2017-2021 by AYRNA Research Group. https://www.uco.es/ayrna/
    Authors: 
      Gómez-Orellana, A.M.; Fernández, J.C.; Dorado-Moreno, M.; Gutiérrez, P.A.; Hervás-Martínez, C.
      Building Suitable Datasets for Soft Computing and Machine Learning Techniques from Meteorological
       Data Integration: A Case Study for Predicting Significant Wave Height and Energy Flux.
      Energies 2021, 14, 468. https://doi.org/10.3390/en14020468                                                                       

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program,
in the file COPYING. If not, see <http://www.gnu.org/licenses/>.

Additional permissions under GNU GPL version 3 section 7:
1. Redistributions of source code, with or without modification, must retain
the above full copyright notice as author attributions.

2. Redistributions in binary form and/or the use of the documentation,
with or without modification, must reproduce the above full copyright notice
as author attributions in the documentation and/or materials provided with
the distribution.

3. Modified versions of source code and/or documentation, as well as binary
distributions, must be marked in reasonable ways as different from the original version.

4. Neither name of copyright holders nor the names of its contributors may be used
to endorse or promote products derived from this software for publicity purposes
without specific prior written permission.

5. Redistribution and/or use of source code, binary format and documentation,
with or without modification, could require indemnification of licensors
and authors by anyone who conveys the material (or modified versions of it)
with contractual assumptions of liability to the recipient, for any liability
that these contractual assumptions directly impose on those licensors and authors.

SPAMDA uses some external libraries. You can see their respective notices about license,
copyright and disclaimer in the following files. For a more complete information about
such licenses, see the distributions provided by their authors:
-Library NetCDF Java, version 4.6.10
	Notice of license in the file NetCDF-LICENSE
-Library SLF4J, version 1.7.25
	Notice of license in the file SLF4J-LICENSE
-Library WEKA, version 3.8.1
	Notice of license in the file WEKA-LICENSE

Contact information:
Antonio Manuel Gomez Orellana, Mr.
email: am[dot]gomez[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).

Juan Carlos Fernandez Caballero, PhD.
email: jfcaballero[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).
 */

package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import utils.Utils;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import view.interfaces.InterfaceViewOpenDatasetFile;


/**
 * This class defines the controller for managing the events generated by the view  OpenDatasetFile.
 * 
 */
public class ControllerViewOpenDatasetFile implements ActionListener, ListSelectionListener, MouseListener {
    
    /**
     * View.
     */
    private final InterfaceViewOpenDatasetFile view;
    
    
    /**
     * Dataset files' names that belong to the selected buoy.
     */
    private DefaultListModel<String> modelDatasetFiles;

    
    /**
     * Path of each dataset file that belongs to the selected buoy.
     */
    private ArrayList<String> pathDatasetFiles;
        
    
    /**
     * Preprocessed dataset files's names that belong to the selected buoy and dataset file.
     */            
    private DefaultListModel<String> modelPreprocessedDatasetFiles;

    
    /**
     * Path of each preprocessed dataset file that belongs to the selected buoy and dataset file.
     */
    private ArrayList<String> pathPreprocessedDatasetFiles;
    
    
    /**
     * Path of selected dataset file.
     */
    private String pathDatasetFile;
    
    
    /**
     * File's name of selected dataset file.
     */
    private String datasetFilename;
    
    
    /**
     * Path of selected preprocessed dataset file.
     */
    private String pathPreprocessedDatasetFile;
    
    
    /**
     * File's name of selected preprocessed dataset file.
     */
    private String preprocessedDatasetFilename;
    
    
    /**
     * To check if user selected a file or clicked on Cancel.
     */
    private boolean userSelectedAFile;

    
    /**
     * Type of the selected file: Dataset/Preprocessed.
     */
    private String typeSelectedDatasetFile;

    
    /* Methods of the class */
    
    
    /**
     * Constructor.
     * @param view View that this controller will manage.
     * @param datamodel Buoys's information.
     */
    public ControllerViewOpenDatasetFile(InterfaceViewOpenDatasetFile view, DefaultTableModel datamodel){

        /* Sets View */
        this.view = view;
        
        /* Initialize to default values. */
        this.pathDatasetFiles=new ArrayList<>();
        this.modelDatasetFiles=new DefaultListModel<>();
        
        this.pathPreprocessedDatasetFiles=new ArrayList<>();
        this.modelPreprocessedDatasetFiles=new DefaultListModel<>();
        
        this.pathDatasetFile="";
        this.datasetFilename="";
        this.pathPreprocessedDatasetFile="";    
        this.preprocessedDatasetFilename="";
        
        this.userSelectedAFile=false;
        
        this.typeSelectedDatasetFile="";
        
        /* Shows Id and name of each buoy. */
        this.view.setModelBuoys(datamodel);
        
    }

    
    /**
     * Returns view.
     * @return View.
     */
    public InterfaceViewOpenDatasetFile getView(){
        
        /* Returns view */
        return this.view;
        
    }

    
    /**
     * Returns path of each dataset file that belongs to the selected buoy.
     * @return Path of each dataset file that belongs to the selected buoy.
     */
    private ArrayList<String> getPathDatasetFiles(){
    
        /* Gets path of each dataset file that belongs to the selected buoy. */
        
        return this.pathDatasetFiles;

    }

    
    /**
     * Returns dataset files's names that belong to the selected buoy.
     * @return Dataset files's names that belong to the selected buoy.
     */
    private DefaultListModel<String> getModelDatasetFiles(){
    
        /* Gets the model of the list that shows the dataset files that belong to the buoy. */
        
        return this.modelDatasetFiles;

    }
    
    
    /**
     * Returns path of each preprocessed dataset file that belongs to the selected buoy and dataset file.
     * @return Path of each preprocessed dataset file that belongs to the selected buoy and dataset file.
     */
    private ArrayList<String> getPathPreprocessedDatasetFiles(){
    
        /* Gets full path of the preprocessed dataset files that belong to the dataset file. */
        
        return this.pathPreprocessedDatasetFiles;

    }

    
    /**
     * Returns preprocessed dataset files's names that belong to the selected buoy and dataset file.
     * @return Preprocessed dataset files's names that belong to the selected buoy and dataset file.
     */
    private DefaultListModel<String> getModelPreprocessedDatasetFiles(){
    
        /* Gets the model of the list that shows the preprocessed dataset files that belong to the dataset file. */
        
        return this.modelPreprocessedDatasetFiles;

    }    

    
    /**
     * Sets path of selected dataset file.
     * @param pathDatasetFile Path of selected dataset file.
     */
    private void setPathDatasetFile(String pathDatasetFile){
    
        /* Sets the path to the dataset file selected by user. */
        
        this.pathDatasetFile = pathDatasetFile;
        
    }
    
    
    /**
     * Returns path of selected dataset file.
     * @return Path of selected dataset file.
     */
    public String getPathDatasetFile(){
    
        /* Gets the path to the dataset file selected by user. */
        
        return this.pathDatasetFile;
        
    }
    
    
    /**
     * Sets file's name of selected dataset file.
     * @param datasetFilename File's name of selected dataset file.
     */
    private void setDatasetFilename(String datasetFilename){
    
        /* Sets the file name dataset selected by user. */
        
        this.datasetFilename = datasetFilename;
        
    }
    
       
    /**
     * Returns file's name of selected dataset file.
     * @return File's name of selected dataset file.
     */
    public String getDatasetFilename(){
    
        /* Gets the file name dataset selected by user. */
        
        return this.datasetFilename;
        
    }
        
    
    /**
     * Sets path of selected preprocessed dataset file.
     * @param pathPreprocessedDatasetFile Path of selected preprocessed dataset file.
     */
    private void setPathPreprocessedDatasetFile(String pathPreprocessedDatasetFile){
    
        /* Sets the path to the preprocessed dataset file selected by user. */
        
        this.pathPreprocessedDatasetFile = pathPreprocessedDatasetFile;
        
    }
    
    
    /**
     * Returns path of selected preprocessed dataset file.
     * @return Path of selected preprocessed dataset file.
     */
    public String getPathPreprocessedDatasetFile(){
    
        /* Gets the path to the preprocessed dataset file selected by user. */
        
        return this.pathPreprocessedDatasetFile;
        
    }
    
    
    /**
     * Sets file's name of selected preprocessed dataset file.
     * @param preprocessedDatasetFilename File's name of selected preprocessed dataset file.
     */
    private void setPreprocessedDatasetFilename(String preprocessedDatasetFilename){
    
        /* Sets the preprocessed dataset file name selected by user. */
        
        this.preprocessedDatasetFilename = preprocessedDatasetFilename;
        
    }
    
       
    /**
     * Returns file's name of selected preprocessed dataset file.
     * @return File's name of selected preprocessed dataset file.
     */
    public String getPreprocessedDatasetFilename(){
    
        /* Gets the preprocessed dataset file name selected by user. */
        
        return this.preprocessedDatasetFilename;
        
    }    

    
    /**
     * Sets type of the selected file: Dataset/Preprocessed.
     * @param typeSelectedDatasetFile Type of the selected file: Dataset/Preprocessed.
     */
    private void setTypeSelectedDatasetFile(String typeSelectedDatasetFile){
    
        /* Sets the type of the selected dataset file. */
        
        this.typeSelectedDatasetFile = typeSelectedDatasetFile;
        
    }
    
    
    /**
     * Returns type of the selected file: Dataset/Preprocessed.
     * @return Type of the selected file: Dataset/Preprocessed.
     */
    public String getTypeSelectedDatasetFile(){
    
        /* Gets the type of the selected dataset file. */
        
        return this.typeSelectedDatasetFile;
        
    }
            

    /**
     * Sets true that user selected a dataset / preprocessed file.
     */
    private void setUserSelectedAFile(){
    
        /* Sets true when user selected a dataset file */
        
        this.userSelectedAFile = true;
        
    }    


    /**
     * Returns true if user selected a dataset / preprocessed file or False if not.
     * @return True if user selected a dataset / preprocessed file or False if not.
     */
    public boolean getUserSelectedAFile(){
    
        /* Gets true/false if user selected or not a dataset file.*/
        
        return this.userSelectedAFile;
        
    }

    
    /**
     * Returns selected id Buoy by user to open dataset / preproceesed file.
     * @return Selected id Buoy by user to open dataset / preproceesed file.
     */
    public int getSelectedIdBuoy(){
    
        /* Gets the selected id Buoy by user to open dataset / preprocessed file. */
        
        /* Selected row. */
        int selectedRow = getView().getSelectedRowBuoy();
        
        /* Selected id Buoy. */
        int idBuoy = (int) getView().getModelBuoys().getValueAt(selectedRow, 0);
        
        return idBuoy;
        
    }


    /**
     * Returns selected Station ID Buoy by user to open dataset / preproceesed file.
     * @return Selected Station ID Buoy by user to open dataset / preproceesed file.
     */
    public String getSelectedStationID(){
    
        /* Gets the selected Station ID Buoy by user to open dataset / preproceesed file. */
        
        /* Selected row. */
        int selectedRow = getView().getSelectedRowBuoy();
        
        /* Selected id Buoy. */
        String stationID = (String) getView().getModelBuoys().getValueAt(selectedRow, 1);
        
        return stationID;
        
    }

        
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void valueChanged(ListSelectionEvent event){        
        
        /* To know if event was generated in jlstDatasetFiles */
        String objectClass = event.getSource().getClass().getSimpleName();
        
        if (event.getValueIsAdjusting() == false){        
        
            switch (objectClass) {

                case "DefaultListSelectionModel":

                    /*  tblBuoys */
                        
                    /* A new buoy was selected in tblBuoysDatasets. */                        
                
                    /* Shows dataset files that belong to the selected buoy. */
                    buoySelectionChanged();
                                                               
                    break;
                    
                case "JList":
                            
                    if(event.getSource().toString().contains("jlstDatasetFiles")){
                                               
                        /* jlstDatasetFiles */
                    
                        /* A new dataset file was selected by user. */
                    
                        /* Shows preprocess files of the dataset file selected. */
                        datasetSelectionChanged();
                    }

                    break;

            }
        }        
        
    }
    
    
    
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void actionPerformed(ActionEvent event){

        /* Manages the event generated by the view. */
        
        /* Gets the event name.*/
        String eventName = event.getActionCommand();
        
        switch (eventName) {                
                           
            case InterfaceViewOpenDatasetFile.OPEN_DATASET:
                
                /* Action OPEN_DATASET. */
                doOpenFile("Open dataset");

                break;
                
            case InterfaceViewOpenDatasetFile.BACK:
                
                /* Action BACK clicked. */
                doBack();
                break;
                
            case InterfaceViewOpenDatasetFile.HELP:
                
                /* Action HELP clicked. */
                doHelp();
                break;
                
            default:
                
                /* Event not defined. */
                
                JOptionPane.showMessageDialog(null, "Event not defined:" + eventName + ".", "Error", JOptionPane.ERROR_MESSAGE);
                break;
        }

    }



    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void mouseClicked(MouseEvent event) {

        /* Component that generated the event. */
        String component = event.getComponent().getName();

        if(event.getClickCount() == 2){
            
            /* Double click. */
            
            switch (component) {

                case "jlstDatasetFiles":
                
                    /* Double click in dataset files list. */
                    
                    doOpenFile("Double click Dataset");
                    break;
                    
                case "jlstPreprocessedDataset":
                
                    /* Double click in preprocessed dataset files list. */
                    
                    doOpenFile("Double click Preprocessed dataset");
                    break;                    
            }
        }
    }

    
    @Override
    public void mousePressed(MouseEvent e) {
       
    }
    

    @Override
    public void mouseReleased(MouseEvent e) {
       
    }

    
    @Override
    public void mouseEntered(MouseEvent e) {
       
    }


    @Override
    public void mouseExited(MouseEvent e) {
       
    }
    
    
    
    /* Methods for processing each event (what user clicked on view). */    

    
    /**
     * Updates dataset filenames when user selects a new buoy.
     */
    private void buoySelectionChanged(){
        
        /* The user changed buoy selection. */
        
        /* Row selected in tablemodel. */        
        int selectedRow = getView().getSelectedRowBuoy();
        
        if(selectedRow!=-1){
            
            /* Id of the buoy selected. */
            int idBuoy = (int) getView().getModelBuoys().getValueAt(selectedRow, 0);

            /* Utilities. */
            Utils util = new Utils();

            /* A new buoy was selected. */
            
            /* Clear intermediate datasets. */
            getModelDatasetFiles().clear();
            getPathDatasetFiles().clear();
            
            /* Clear pre-processed datasets. */
            getModelPreprocessedDatasetFiles().clear();
            getPathPreprocessedDatasetFiles().clear();

            /* Search for the .db dataset files that belong to the buoy. */
            util.searchFiles(idBuoy, getModelDatasetFiles(), new ArrayList<>(Arrays.asList("Datasets")), getPathDatasetFiles(), new ArrayList<>(Arrays.asList("DB Files", "DB", "db")));
            

            /* Updates in view the dataset files that belong to the buoy. */
            getView().setModelDatasets(getModelDatasetFiles());
        
        }
    }
    
    
    
    /**
     * Updates preprocessed dataset filenames when user selects a new dataset.
     */
    private void datasetSelectionChanged(){
    
        /* Shows preprocessed dataset files that belong to the selected dataset file. */
        
        /* Gets the dataset file. */
        int selectedIndex = getView().getSelectedIndexDataset();
        
        if(selectedIndex != -1){
                       
            /* Gets the name of the selected dataset file. */
            String filename = getModelDatasetFiles().get(selectedIndex);
            filename = filename.substring(0, filename.length() - 3);

           
            /* Utilities. */
            Utils util = new Utils();

            /* A new dataset file was selected. */

            /* Preprocess files */               
            getModelPreprocessedDatasetFiles().clear();
            getPathPreprocessedDatasetFiles().clear();
            
            /* selected buoy. */
            int idBuoy = getSelectedIdBuoy();

            /* Search for the .db Preprocess files that belong to the buoy. */        
            util.searchFiles(idBuoy, getModelPreprocessedDatasetFiles(), new ArrayList<>(Arrays.asList("Preprocess"+File.separator+filename)), getPathPreprocessedDatasetFiles(), new ArrayList<>(Arrays.asList("DB Files", "DB", "db")));

            /* Updates in view the dataset files that belong to the selected dataset file. */
            getView().setModelPreprocessedDatasets(getModelPreprocessedDatasetFiles());

        }
    }
    

    
    /**
     * Opens a dataset / preprocessed dataset file.
     * 
     * @param event Indicates how user selected the file to open.
     */            
    private void doOpenFile(String event){
        
        /* 
            This method is called when user:
        
             - click on Open dataset button
             - double click on dataset files
             - double click on preprocessed dataset files
        */
        
        /* Selected index dataset file. */        
        int selectedIndex;
        
        /* Path of the dataset file. */
        String selectedPathDatasetFile="";
        
        /* Dataset file name. */
        String selectedDatasetFilename="";
        
        /* Path of the preprocessed dataset file. */
        String selectedPathPreprocessedDatasetFile="";
        
        /* Preprocessed dataset file name. */
        String selectedPreprocessedDatasetFilename="";
                                
        /* Type of selected dataset file. */
        String typeSelecteDatasetFile="";


        switch (event) {

            case "Open dataset":

                /* Click on Open dataset button. */
                
                /* Checks first if a preprocessed dataset file is selected. */

                selectedIndex = getView().getSelectedIndexPreprocessedDatasets();
                
                if(selectedIndex!=-1){
                    
                    /* User selected a preprocessed dataset file. */
                    
                    int selectedIndexDataset = getView().getSelectedIndexDataset();
                    
                    selectedPathDatasetFile = getPathDatasetFiles().get(selectedIndexDataset);
                    selectedPathPreprocessedDatasetFile = getPathPreprocessedDatasetFiles().get(selectedIndex);
                    
                    selectedDatasetFilename = getModelDatasetFiles().get(selectedIndexDataset);
                    selectedPreprocessedDatasetFilename = getModelPreprocessedDatasetFiles().get(selectedIndex);
                    
                    typeSelecteDatasetFile="Preprocessed";
                    
                }else{
                
                    /* None preprocessed dataset file is selected. */                    
                    
                    /* Checks if a dataset file is selected. */

                    selectedIndex = getView().getSelectedIndexDataset();
                
                    if(selectedIndex!=-1){
                        
                        /* User selected a dataset file. */
                        
                        selectedPathDatasetFile = getPathDatasetFiles().get(selectedIndex);
                        selectedPathPreprocessedDatasetFile = getPathDatasetFiles().get(selectedIndex);
                    
                        selectedDatasetFilename = getModelDatasetFiles().get(selectedIndex);                    
                        selectedPreprocessedDatasetFilename = getModelDatasetFiles().get(selectedIndex);
                        
                        typeSelecteDatasetFile="Dataset";
                        
                    }else{
                    
                        /* None dataset/preprocessed dataset file is selected. */
                        
                        JOptionPane.showMessageDialog(null, "Please, select an intermediate or pre-processed dataset to open.", "Message", JOptionPane.INFORMATION_MESSAGE);
                    
                    }
                    
                }
                
                break;

            case "Double click Dataset":

                /* Double click in preprocessed dataset files list. */

                /* Checks if a dataset file is selected. */
                
                selectedIndex = getView().getSelectedIndexDataset();
                
                if(selectedIndex!=-1){
                    
                    /* User selected a dataset file. */
                
                    selectedPathDatasetFile = getPathDatasetFiles().get(selectedIndex);
                    selectedPathPreprocessedDatasetFile = getPathDatasetFiles().get(selectedIndex);

                    selectedDatasetFilename = getModelDatasetFiles().get(selectedIndex);                    
                    selectedPreprocessedDatasetFilename = getModelDatasetFiles().get(selectedIndex);
                    
                    typeSelecteDatasetFile="Dataset";
                
                }else{
                    
                    /* None dataset file is selected. */
                        
                    JOptionPane.showMessageDialog(null, "Please, select an intermediate dataset to open.", "Message", JOptionPane.INFORMATION_MESSAGE);                    
                    
                }                                    

                break;                    
                
            case "Double click Preprocessed dataset":

                /* Double click in preprocessed dataset files list. */

                selectedIndex = getView().getSelectedIndexPreprocessedDatasets();
                
                /* Checks if a dataset file is selected. */
                               
                if(selectedIndex!=-1){
                    
                    /* User selected a preprocessed dataset file. */
                
                    int selectedIndexDataset = getView().getSelectedIndexDataset();
                    
                    selectedPathDatasetFile = getPathDatasetFiles().get(selectedIndexDataset);
                    selectedPathPreprocessedDatasetFile = getPathPreprocessedDatasetFiles().get(selectedIndex);

                    selectedDatasetFilename = getModelDatasetFiles().get(selectedIndexDataset);
                    selectedPreprocessedDatasetFilename = getModelPreprocessedDatasetFiles().get(selectedIndex);
                
                    typeSelecteDatasetFile="Preprocessed";
                    
                }else{

                    /* None preprocessed dataset file is selected. */
                        
                    JOptionPane.showMessageDialog(null, "Please, select a pre-processed dataset to open.", "Message", JOptionPane.INFORMATION_MESSAGE);                    
                    
                }

                break;                    
                
        }

        if( ! typeSelecteDatasetFile.equals("")){
            
            /* User selected a dataset. */
            
            /*
                Sets selection made by user and ControllerViewManageBuoys will get it.
            */
            
            setPathDatasetFile(selectedPathDatasetFile);            
            setDatasetFilename(selectedDatasetFilename);
            
            setPathPreprocessedDatasetFile(selectedPathPreprocessedDatasetFile);            
            setPreprocessedDatasetFilename(selectedPreprocessedDatasetFilename);                        

            /* Sets the type of selected dataset. */
            setTypeSelectedDatasetFile(typeSelecteDatasetFile);

            /* Sets true that user selected a dataset file. */
            setUserSelectedAFile();

            /* Closes the view. */
            doBack();
        }

    }

    
    /**
     * Closes the view.
     */    
    private void doBack(){
        
        /* Closes the view. */
        getView().closeView();
    
    }

    
    /**
     * Shows help.
     */    
    private void doHelp(){

        /* Opens pdf file that contains the user manual. */
        
        /* Utilities. */
        Utils util = new Utils();
        
        /* Opens user manual. */
        util.openHelpFile();
        
    }    
    
}
