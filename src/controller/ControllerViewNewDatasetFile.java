/*
SPAMDA: Software for Pre-processing and Analysis of Meteorological DAta to build datasets

Copyright (c) 2017-2018 by AYRNA Research Group. https://www.uco.es/ayrna/
	Authors: 
		Antonio Manuel Gomez Orellana, Juan Carlos Fernandez Caballero,
		Manuel Dorado Moreno, Pedro Antonio Gutierrez Pe√±a and 
		Cesar Hervas Martinez.

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program,
in the file COPYING. If not, see <http://www.gnu.org/licenses/>.

Additional permissions under GNU GPL version 3 section 7:
1. Redistributions of source code, with or without modification, must retain
the above full copyright notice as author attributions.

2. Redistributions in binary form and/or the use of the documentation,
with or without modification, must reproduce the above full copyright notice
as author attributions in the documentation and/or materials provided with
the distribution.

3. Modified versions of source code and/or documentation, as well as binary
distributions, must be marked in reasonable ways as different from the original version.

4. Neither name of copyright holders nor the names of its contributors may be used
to endorse or promote products derived from this software for publicity purposes
without specific prior written permission.

5. Redistribution and/or use of source code, binary format and documentation,
with or without modification, could require indemnification of licensors
and authors by anyone who conveys the material (or modified versions of it)
with contractual assumptions of liability to the recipient, for any liability
that these contractual assumptions directly impose on those licensors and authors.

SPAMDA uses some external libraries. You can see their respective notices about license,
copyright and disclaimer in the following files. For a more complete information about
such licenses, see the distributions provided by their authors:
-Library NetCDF Java, version 4.6.10
	Notice of license in the file NetCDF-LICENSE
-Library SLF4J, version 1.7.25
	Notice of license in the file SLF4J-LICENSE
-Library WEKA, version 3.8.1
	Notice of license in the file WEKA-LICENSE

Contact information:
Juan Carlos Fernandez Caballero, PhD.
email: jfcaballero[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).
 */

package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JOptionPane;
import view.interfaces.InterfaceViewNewDatasetFile;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import view.RunCreationDataset;
import utils.Utils;



/**
 * This class defines the controller for managing the events generated by the view NewDatasetFile.
 * 
 */
public class ControllerViewNewDatasetFile implements ActionListener, MouseListener {
    
    /**
     * View.
     */
    private final InterfaceViewNewDatasetFile view;
    
    
    /**
     * ID of selected buoy.
     */        
    private final int idBuoy;
    
    
    /**
     * File's name of selected dataset file.
     */                
    private final String selectedDatasetFilename;
   
    
    /**
     * TXT files's names that belong to the selected buoy.
     */        
    private DefaultListModel<String> modelTXTFiles;
    
    
    /**
     * TXT files's names selected by user.
     */            
    private DefaultListModel<String> modelSelectedTXTFiles;
    
    
    /**
     * Path of each TXT file that belongs to the selected buoy.
     */
    private ArrayList<String> pathTXTFiles;
    
    
    /**
     * Path of each selected TXT file by user.
     */
    private ArrayList<String> pathSelectedTXTFiles;
    
    
    /* Methods of the class */
    
    
    /**
     * Constructor.
     * @param view View that this controller will manage.
     * @param idBuoy ID of selected buoy.
     * @param selectedDatasetFilename File name of selected dataset file.
     */
    public ControllerViewNewDatasetFile(InterfaceViewNewDatasetFile view, int idBuoy, String selectedDatasetFilename){

        /* Sets View */
        this.view = view;
        
        
        /* Initializes to default values. */
        this.modelTXTFiles=new DefaultListModel<>();
        this.modelSelectedTXTFiles=new DefaultListModel<>();
        
        this.pathTXTFiles=new ArrayList<>();
        this.pathSelectedTXTFiles=new ArrayList<>();
        
        this.idBuoy = idBuoy;
        this.selectedDatasetFilename = selectedDatasetFilename;
        
        /* Search for the files that belong to the buoy. */
        Utils util = new Utils();

        util.searchFiles(this.idBuoy, this.modelTXTFiles, new ArrayList<>(Arrays.asList("TXTinFiles")), this.pathTXTFiles, new ArrayList<>(Arrays.asList("TXT Files", "TXT", "txt")));

        this.view.setTXTFilesListModel(this.modelTXTFiles);
        
        /* Hides panel of dataset file. */
        this.view.setEnabledPanelDataset(false);

    }

    
    /**
     * Returns view.
     * @return View.
     */
    private InterfaceViewNewDatasetFile getView(){
        
        /* Returns view */
        return this.view;
        
    }
    
    
    
    /**
     * Returns ID of selected buoy.
     * @return ID of selected buoy.
     */
    public int getIDBuoy(){
        
        /* Returns ID Buoy. */
        
        return this.idBuoy;
        
    }
    
    
    /**
     * Returns file's name of selected dataset file.
     * @return File's name of selected dataset file.
     */
    public String getSelectedDatasetFilename(){
        
        /* Returns selected dataset file name. */
        
        return this.selectedDatasetFilename;
        
    }
    

    
    /**
     * Returns path of each TXT file that belongs to the selected buoy.
     * @return Path of each TXT file that belongs to the selected buoy.
     */
    public ArrayList<String> getPathTXTFiles(){
    
        /* Gets full path of files that belong to the buoy. */
        
        return this.pathTXTFiles;

    }

    
    /**
     * Returns path of each selected TXT file by user.
     * @return Path of each selected TXT file by user.
     */
    public ArrayList<String> getPathSelectedTXTFiles(){
    
        /* Gets full path of selected TXT files that belong to the buoy. */
        
        return this.pathSelectedTXTFiles;

    }

    
    /**
     * Returns TXT files's names that belong to the selected buoy.
     * @return TXT files's names that belong to the selected buoy.
     */
    public DefaultListModel<String> getListModelTXTFiles(){
    
        /* Gets the model of the list that shows the TXT files that belong to the buoy. */
        
        return this.modelTXTFiles;

    }        
    
    
    /**
     * Returns TXT files's names selected by user.
     * @return TXT files's names selected by user.
     */
    public DefaultListModel<String> getListModelSelectedTXTFiles(){
    
        /* Gets the model of the list that shows the selected TXT files that belong to the buoy. */
        
        return this.modelSelectedTXTFiles;

    }        
    
    
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void actionPerformed(ActionEvent event){

        /* Manages the event generated in the view. */
        
        String eventName = event.getActionCommand(); /* gets the event name.*/
        
        switch (eventName) {                
            
            case InterfaceViewNewDatasetFile.SELECT_FILE:
                
                /* Action SELECT_FILE clicked. */    
                doSelectFile();
                break;
    
            case InterfaceViewNewDatasetFile.UNSELECT_FILE:
                
                /* Action UNSELECT_FILE clicked. */
                doUnSelectFile();
                break;

            case InterfaceViewNewDatasetFile.CREATE_DATASET:
                
                /* Action CREATE_DATASET clicked. */
                doCreateDataset();
                break;
                
            case InterfaceViewNewDatasetFile.CANCEL_DATASET:
                
                /* Action CANCEL_DATASET clicked. */
                doCancelDataset();
                break;

            case InterfaceViewNewDatasetFile.SAVE_DATASET:
                
                /* Action SAVE_DATASET clicked. */
                doSaveDataset();
                break;
                
            case InterfaceViewNewDatasetFile.BACK:
                
                /* Action BACK clicked. */
                doBack();
                break;

            case InterfaceViewNewDatasetFile.HELP:
                
                /* Action HELP clicked. */
                doHelp();
                break;
                
            default:
                
                /* Event not defined. */
                
                JOptionPane.showMessageDialog(null, "Event not defined:" + eventName + ".", "Error", JOptionPane.ERROR_MESSAGE);
                break;
        }

    }
    
    
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void mouseClicked(MouseEvent event) {

        /* Component that generated the event. */
        String component = event.getComponent().getName();

        if(event.getClickCount() == 2){
            
            /* Double click. */
            
            switch (component) {

                case "jlstTXTFiles":
                
                    /* Double click in TXT files of the buoy to select. */
                    
                    doSelectFile();
                    break;
                    
                case "jlstSelectedFiles":
                
                    /* Double click in TXT selected files of the buoy. */
                    
                    doUnSelectFile();
                    break;
            }
        }
    }

    

    @Override
    public void mousePressed(MouseEvent e) {
       
    }
    

    @Override
    public void mouseReleased(MouseEvent e) {
       
    }

    
    @Override
    public void mouseEntered(MouseEvent e) {
       
    }


    @Override
    public void mouseExited(MouseEvent e) {
       
    }
    

    
    /* Methods for processing each event (what user clicked on view). */    
   

    /**
     * Selects a TXT file to use in dataset creation.
     */    
    private void doSelectFile(){

        /* Moves a TXT file to selected TXT files. */
        
        /* Index of the selected TXT file. */
        int index = getView().getSelectedTXTIndex();

        if(index==-1){
            
            /* None file is selected. */
            
            JOptionPane.showMessageDialog(null, "Please, select a file.", "Message", JOptionPane.INFORMATION_MESSAGE);
            
        }else{
        
            /* Adds the selected file to selected TXT files. */
            getPathSelectedTXTFiles().add(getPathTXTFiles().get(index));
            getListModelSelectedTXTFiles().addElement(getListModelTXTFiles().elementAt(index));
            getView().setTXTFilesListModel(getListModelTXTFiles());

            /* Removes the selected file from TXT files. */
            getPathTXTFiles().remove(index);
            getListModelTXTFiles().remove(index);
            getView().setTXTSelectedFilesListModel(getListModelSelectedTXTFiles());
            
        }
   
    }


    
    /**
     * Unselects a selected TXT file.
     */        
    private void doUnSelectFile(){

        /* Moves a selected TXT file to TXT files. */
        
        /* Index of the selected TXT file. */
        
        int index = getView().getSelectedDatasetIndex();
        
        if(index==-1){
            
            /* None file is selected. */
            
            JOptionPane.showMessageDialog(null, "Please, select a file.", "Message", JOptionPane.INFORMATION_MESSAGE);
            
        }else{

            /* Adds the selected file to TXT files. */

            getPathTXTFiles().add(getPathSelectedTXTFiles().get(index));
            getListModelTXTFiles().addElement(getListModelSelectedTXTFiles().elementAt(index));

            /* Removes the selected file from selected TXT files. */

            getPathSelectedTXTFiles().remove(index);
            getListModelSelectedTXTFiles().remove(index);
        }
   
    }
    
    
    
    /**
     * Checks that user selected one TXT file at least and shows a panel that
     * requests information of the new dataset file to create.
     */
    private void doCreateDataset(){
    
        /* Checks that the user has selected a file/several files to create a new dataset file
           and shows the panel that requests filename and confirmation to do it. */
        
        if(getPathSelectedTXTFiles().isEmpty() == true ){

            /* No files selected. */
            
            JOptionPane.showMessageDialog(null, "Please, you must select an annual text file to create a new intermediate dataset.", "Message", JOptionPane.INFORMATION_MESSAGE);
        
        }else{
            
            /* Files selected. */
            
            /* Disables Cancel and New buttom. */
            getView().setEnableCancelButtom(false);
            getView().setEnableNewButtom(false);

            /* The user can not select/unselect files. */
            getView().setEnablePanelSelectionFiles(false);
            
            /* Shows the file dataset panel to ask file name and confirmation. */
            getView().setEnabledPanelDataset(true);
            getView().setDefaultFocusPanelDataset();
            
        }

    }
    
    
    
    /**
     * Creates dataset file with selected .TXT files and information typed by user.
     */
    private void doSaveDataset(){
       
        /* Saves the dataset selected by user. */
        
        /* Utilities. */
        Utils util = new Utils();
        
        /* File name. */
        String filename = getView().getDatasetFileName();
        
        /* Checks file name. */        
        if (util.isValidFilename(filename) == true){
            
            /* File name is valid. */              
                
            /* To check if user wants to overwrite the dataset file in cases it exists. */
            boolean createDataset=false;

            /*
                If the dataset file already exists and any preprocess file belong to it,
                it is not necessary to create the directory with the same name of dataset file.
            */
            boolean createDirectoryDataset=false;


            /* Path to create the dataset file. */
            String rootDatasets = System.getProperty("user.dir", ".")+File.separator+"DB"
                            +File.separator+"id"+Integer.toString(idBuoy)+File.separator+"Datasets"+File.separator;                       


            /* Root that will contain all preprocess files of the dataset file to be created. */
            String rootPreprocess = System.getProperty("user.dir", ".")+File.separator+"DB"
            +File.separator+"id"+Integer.toString(idBuoy)+File.separator+"Preprocess"+File.separator+filename;


            /* Dataset and XML file to be created. */           
            File datasetFileName = new File(rootDatasets+filename+".db");
            File xmlFileName = new File(rootDatasets+filename+".xml");


            /* Checks if dataset file name exists.*/
            if (datasetFileName.exists() == true){

                /* Checks if user typed the same dataset is preprocessing. */

                if(getSelectedDatasetFilename().equals(datasetFileName.getPath())){

                    JOptionPane.showMessageDialog(null, "You can not overwrite the same intermediate dataset that you are currently preprocessing.", "Message", JOptionPane.WARNING_MESSAGE);

                }else{
                                        
                    /* Checks if any preprocessed files belong to dataset file. */
                    if(util.isEmptyDirectory(rootPreprocess) == true){

                        /* The dataset file already exists but none preprocessed files belong to it. */

                        /* Asks the user that really wants to overwrite the dataset file. */

                        Object[] options = {"Cancel", "Overwrite"};

                        if (JOptionPane.showOptionDialog(null, "Attention !!\n\nThe intermediate dataset "+datasetFileName.getName()+" already exists.\n"
                                +"¬øDo you to want to overwrite it?\n\n","Warning",
                                JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null,options, options[0])==1){

                            /* User clicked on Overwrite. */

                            if (datasetFileName.delete()==false){

                                /* Dataset could not be deleted. */

                                JOptionPane.showMessageDialog(null, "The intermediate dataset " + datasetFileName.getName()+ " could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);

                            }else{

                                /* The dataset file will be created. */

                                createDataset=true;

                            }
                        }
                    }else{

                        /* The dataset file already exists and some preprocessed files belong to it. */

                        /* Asks the user that really wants to overwrite the dataset file and delete the preprocessed files. */

                        /* User must click on this option to overwrite dataset files and delete preprocessed files. */
                        JCheckBox deleteFiles = new JCheckBox("Delete intermediate dataset and pre-processed datasets.");

                        Object[] options = {"Cancel", deleteFiles, "Overwrite"};

                        if (JOptionPane.showOptionDialog(null, "Attention !!\n\nThe intermediate dataset "+datasetFileName.getName()+" already exists and "
                                +"some pre-processed datasets belong to it.\n¬øDo you to want to overwrite it and delete the pre-processed datasets?\n\n","Warning",
                                JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null,options, options[0])==2){

                            /* User clicked on Overwrite. */

                            if (deleteFiles.isSelected()){

                                /* And clicked on: Delete dataset file and preprocessed files. */

                                /* Deletes directory and preprocessed files. */
                                util.deleteDirectory(rootPreprocess);

                                /* Deletes dataset file. */
                                if (datasetFileName.delete()==false){

                                    /* Dataset could not be deleted. */

                                    JOptionPane.showMessageDialog(null, "The intermediate dataset " + datasetFileName.getName()+ " could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);

                                }else{

                                    /* The dataset file will be created. */

                                    createDataset=true;
                                    createDirectoryDataset=true;

                                }                        
                            }else{

                                JOptionPane.showMessageDialog(null, "To overwrite the intermediate dataset and delete the pre-processed datasets you must select:\n\n"
                                        + "\'Delete intermediate dataset and pre-processed datasets.\'\n\nwhen asked in dialog.", "Message", JOptionPane.INFORMATION_MESSAGE);

                            }
                        }
                    }             
                }
            }else{

                /* The dataset file not exits, so it will be created and is directory. */

                createDataset=true;
                createDirectoryDataset=true;

            }


            /* Checks if dataset file can be created. */
            if(createDataset==true){

                /* Creates a new dataset file with TXT files selected. */            

                /* Short description about the file to be created. */
                String shortDescription = getView().getShortDescription();

                /* File to merge in dataset. */
                File newFile;

                /* Files to merge in dataset. */
                ArrayList<File> files = new ArrayList<>();

                /* Number of TXT selected files. */
                int numSelectedTXTFiles = getPathSelectedTXTFiles().size();

                for(int i=0; i<numSelectedTXTFiles; i++){

                    /* Gets the TXT file to add. */             
                    newFile=new File(getPathSelectedTXTFiles().get(i));

                    /* Adds the TXT file to be processed. */
                    files.add(newFile);
                }

                /* View that creates the dataset file. */
                RunCreationDataset creationDataset = new RunCreationDataset(null, true);

                /* File to be created, short description and files to be used. */
                creationDataset.setDatasetFilename(datasetFileName);
                creationDataset.setXMLFilename(xmlFileName);
                creationDataset.setShortDescription(shortDescription);
                creationDataset.setFiles(files);

                /* Starts the process. */
                creationDataset.startCreationDataset();
                creationDataset.setVisible(true);

                /* Creates the directory where store preprocessed files of this dataset. */
                if(createDirectoryDataset==true){

                    /* Creates the directory with the same name of dataset file. */
                    util.createDirectory(rootPreprocess);

                }

                /* The process has finished. Sets enabled off dataset file panel. */
                doCancelDataset();

                /* Closes view. */
                doBack();

            }else{

                /* Cancelled by user. */
                JOptionPane.showMessageDialog(null, "Operation cancelled.", "Message", JOptionPane.INFORMATION_MESSAGE);               

            }            
        }else{
            
            /* Error. File name is not valid. */
            
            JOptionPane.showMessageDialog(null, "File name not valid. Please, checks it has valid characters and no extension.", "Message", JOptionPane.INFORMATION_MESSAGE);
                
        }
        
    }
    
    
        
    /**
     * Cancels dataset creation.
     */    
    private void doCancelDataset(){
        
        /* Dataset creation cancelled by user. */
        
        /* Clears data of dataset fields an hides the panel. */
        getView().clearFieldsDatasetFile();
        getView().setEnabledPanelDataset(false);
        
        /* The user can select/unselect files. */
        getView().setEnablePanelSelectionFiles(true);
        
        /* Enables Cancel and New buttom. */
        getView().setEnableCancelButtom(true);
        getView().setEnableNewButtom(true);
            
    }
    

    /**
     * Closes the view.
     */    
    private void doBack(){
        
        /* Closes the view. */
        getView().closeView();
    
    }

    
    /**
     * Shows help.
     */        
    private void doHelp(){

        /* Opens pdf file that contains the user manual. */
        
        /* Utilities. */
        Utils util = new Utils();
        
        /* Opens user manual. */
        util.openHelpFile();
        
    }

}
