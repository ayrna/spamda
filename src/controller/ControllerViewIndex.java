/*
SPAMDA: Software for Pre-processing and Analysis of Meteorological DAta to build datasets

Copyright (c) 2017-2021 by AYRNA Research Group. https://www.uco.es/ayrna/
    Authors: 
      Gómez-Orellana, A.M.; Fernández, J.C.; Dorado-Moreno, M.; Gutiérrez, P.A.; Hervás-Martínez, C.
      Building Suitable Datasets for Soft Computing and Machine Learning Techniques from Meteorological
       Data Integration: A Case Study for Predicting Significant Wave Height and Energy Flux.
      Energies 2021, 14, 468. https://doi.org/10.3390/en14020468                                                                       

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program,
in the file COPYING. If not, see <http://www.gnu.org/licenses/>.

Additional permissions under GNU GPL version 3 section 7:
1. Redistributions of source code, with or without modification, must retain
the above full copyright notice as author attributions.

2. Redistributions in binary form and/or the use of the documentation,
with or without modification, must reproduce the above full copyright notice
as author attributions in the documentation and/or materials provided with
the distribution.

3. Modified versions of source code and/or documentation, as well as binary
distributions, must be marked in reasonable ways as different from the original version.

4. Neither name of copyright holders nor the names of its contributors may be used
to endorse or promote products derived from this software for publicity purposes
without specific prior written permission.

5. Redistribution and/or use of source code, binary format and documentation,
with or without modification, could require indemnification of licensors
and authors by anyone who conveys the material (or modified versions of it)
with contractual assumptions of liability to the recipient, for any liability
that these contractual assumptions directly impose on those licensors and authors.

SPAMDA uses some external libraries. You can see their respective notices about license,
copyright and disclaimer in the following files. For a more complete information about
such licenses, see the distributions provided by their authors:
-Library NetCDF Java, version 4.6.10
	Notice of license in the file NetCDF-LICENSE
-Library SLF4J, version 1.7.25
	Notice of license in the file SLF4J-LICENSE
-Library WEKA, version 3.8.1
	Notice of license in the file WEKA-LICENSE

Contact information:
Antonio Manuel Gomez Orellana, Mr.
email: am[dot]gomez[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).

Juan Carlos Fernandez Caballero, PhD.
email: jfcaballero[at]uco[dot]es
Address: University of Cordoba, Department of Computer Science
and Numerical Analysis, AYRNA Research Group, Rabanales Campus,
Einstein Building, 3rd floor. Road Madrid-Cadiz, Km 396-A.
14071 - Cordoba (Spain).
 */

package controller;

import view.interfaces.InterfaceViewAbout;
import view.interfaces.InterfaceViewIndex;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import view.About;
import view.OpenARFFfile;
import view.ManageBuoys;
import view.interfaces.InterfaceViewManageBuoys;
import view.DatasetFileConverter;
import view.interfaces.InterfaceViewDatasetFileConverter;
import view.interfaces.InterfaceViewManageReanalysisData;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import view.interfaces.InterfaceViewOpenARFFfile;
import utils.Utils;
import view.Index;
import view.ManageReanalysisData;



/**
 * This class defines the controller for managing the events generated by the view Index.
 * 
 */
public class ControllerViewIndex extends WindowAdapter implements ActionListener{
    
    /**
     * View.
     */
    private final InterfaceViewIndex view;
    
    
    /* Methods of the class */
    
    
    /**
     * Constructor.
     * @param view View that this controller will manage.
     */
    public ControllerViewIndex(InterfaceViewIndex view){

        /* Sets View */
        this.view = view;

    }

    
    /**
     * Returns view.
     * @return View.
     */
    private InterfaceViewIndex getView(){
        
        /* Returns view */
        return view;
        
    }
    
    
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void actionPerformed(ActionEvent event){

        /* Manages the event generated in the view. */
        
        /* Gets the event name.*/
        String eventName = event.getActionCommand();
        
        switch (eventName) {                
            
            case InterfaceViewIndex.MANAGE_BUOYS_DATA:
                
                /* Action MANAGE_BUOYS_DATA clicked. */
                doManageBuoysData();
                break;

            case InterfaceViewIndex.MANAGE_REANALYSIS_DATA:
                
                /* Action MANAGE_REANALYSIS_DATA clicked. */
                doManageReanalysisData();
                break;

            case InterfaceViewIndex.DATASET_CONVERTER:
                
                /* Action DATASET_CONVERTER clicked. */
                doDatasetConverter();
                break;                
                
            case InterfaceViewIndex.OPEN_ARFF_FILE:
                
                /* Action OPEN_ARFF_FILE clicked. */
                doOpenARFFfile();
                break;                

            case InterfaceViewIndex.EXIT:
                
                /* Action EXIT clicked. */
                doExit();
                break;

            case InterfaceViewIndex.ABOUT:
                
                /* Action ABOUT clicked. */
                doAbout();
                break;
                
            case InterfaceViewIndex.HELP:
                
                /* Action HELP clicked. */
                doHelp();
                break;
                
            default:
                
                /* Event not defined. */
                
                JOptionPane.showMessageDialog(null, "Event not defined:" + eventName + ".", "Error", JOptionPane.ERROR_MESSAGE);
                break;
        }

    }

    
    /**
     * Manages events generated in the view.
     * @param event Event generated in the view.
     */
    @Override
    public void windowClosing(WindowEvent event) {                      
        
        /* Action EXIT clicked. */
        doExit();

    }

    
    
    /* Methods for processing each event (what user clicked on view). */    


    /**
     * Opens ManageBuoys view.
     */    
    private void doManageBuoysData(){
        
        /* Opens ManageBuoys view. */
        
        /* Creates the view and controller. */
        InterfaceViewManageBuoys manageBuoysView = new ManageBuoys( (Index) getView(), false);
        ControllerViewManageBuoys controller = new ControllerViewManageBuoys(manageBuoysView, manageBuoysView.getModelBuoys());


        /* Sets TableCellRenderer for tblStatistics. */
        controller.setTblStatisticsCellRenderer();
        

        /* Sets TableCellRenderer for tblPreprocessedData. */
        controller.setTblPreprocessedDataCellRenderer();

        /* Sets TableCellRenderer for tblThresholds. */
        controller.setTblThresholdsCellRenderer();
        
        /* Sets TableCellRenderer for tblFinalDataset. */
        controller.setTblFinalDatasetCellRenderer();
        
        /* Sets the controller that will manage all events and shows the view. */
        manageBuoysView.setController(controller);
        
        /* Disables tab: Classification. */
        manageBuoysView.setEnabledTab(4, false);
        manageBuoysView.showView();
        
    }    


    /**
     * Opens ManageReanalysisData view.
     */    
    private void doManageReanalysisData(){
        
        /* Opens ManageReanalysisData view. */
        
        /* Creates the view and controller. */
        InterfaceViewManageReanalysisData manageReanalysisDataView = new ManageReanalysisData( (Index) getView(), false);
        ControllerViewManageReanalysisData controller = new ControllerViewManageReanalysisData(manageReanalysisDataView, manageReanalysisDataView.getModelReanalysisData());
        
        /* Sets the controller that will manage all events and shows the view. */
        manageReanalysisDataView.setController(controller);
        manageReanalysisDataView.showView();
        
    }    
                    
    
    /**
     * Opens DatasetFileConverter view.
     */        
    private void doDatasetConverter(){
        
        /* Opens DatasetFileConverter view. */
        
        /* Creates the view and controller. */
        InterfaceViewDatasetFileConverter fileConverter = new DatasetFileConverter( (Index) getView(), false);
        ControllerViewDatasetFileConverter controller = new ControllerViewDatasetFileConverter(fileConverter, fileConverter.getModelBuoys());
       
        /* Sets the controller that will manage all events and shows the view. */
        fileConverter.setController(controller);
        fileConverter.showView();
        
    }
    
    
    /**
     * Opens OpenARFFfile view.
     */            
    private void doOpenARFFfile(){
        
        /* Opens OpenARFFfile view. */
        
        /* Creates the view and controller. */
        InterfaceViewOpenARFFfile openARFFfile = new OpenARFFfile( (Index) getView(), false);
        ControllerViewOpenARFFfile controller = new ControllerViewOpenARFFfile(openARFFfile);
        
        /* Sets the controller that will manage all events and shows the view. */
        openARFFfile.setController(controller);
        openARFFfile.showView();
        
    }

    
    /**
     * Opens About view.
     */                
    private void doAbout(){
        
        /* Opens About view. */
        
        /* Creates the view and controller. */
        InterfaceViewAbout aboutView = new About( (Index) getView(), false);
        ControllerViewAbout controller = new ControllerViewAbout(aboutView);
        
        /* Sets the controller that will manage all events and shows the view. */
        aboutView.setController(controller);
        aboutView.showView();

    }

    
    /**
     * Closes application.
     */                    
    private void doExit(){
               
        /* Checks if any WekaExplorer frame is active before shutting down application. */
                
        /* WekaExplorer windows active. */
        int count=0;
        
        /* To check if user want to exit although WekaExplorer windows are active. */
        boolean exit=true;
         
        /* Gets windows currently actives. */
        java.awt.Window windowsActive[] = java.awt.Window.getWindows();
        
        /* Checks if any WekaExplorer is active. */
        for (Window win : windowsActive) {
            if (win.getName().equals("WekaExplorer")) {
                
                /* A WekaExplorer window is active. */
                
                count = count + 1;
            }
        }
        
        if(count>0){
        
            /* There are WekaExplorer windows active. */
            
            Object[] options = {"Cancel", "Exit"};            
            
            if (JOptionPane.showOptionDialog(null, "There are " + count +" WekaExplorer windows active that will also be closed.\n\n"
                        +"¿ Do you really want to exit ?","Warning",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null,options, options[0])==0){

                /* User clicked on cancel. */
                
                exit=false;

            }
            
        }
        
        if(exit==true){
        
            /* Closes Index view. */
            getView().closeView();

            /* Shuts down application. */
            System.exit(0);
        }
            
    }
    
    /**
     * Shows help.
     */                
    private void doHelp(){
        
        /* Opens pdf file that contains the user manual. */
        
        /* Utilities. */
        Utils util = new Utils();
        
        /* Opens user manual. */
        util.openHelpFile();
    
    }

}
